CommandLine.argc = _symbol : C_Int.t
CommandLine.argv = _symbol : C_StringArray.t
CommandLine.commandName = _symbol : C_String.t
Cygwin.toFullWindowsPath = _import PRIVATE : NullString8.t -> C_String.t
Date.Tm.getHour = _import PRIVATE : unit -> C_Int.t
Date.Tm.getIsDst = _import PRIVATE : unit -> C_Int.t
Date.Tm.getMDay = _import PRIVATE : unit -> C_Int.t
Date.Tm.getMin = _import PRIVATE : unit -> C_Int.t
Date.Tm.getMon = _import PRIVATE : unit -> C_Int.t
Date.Tm.getSec = _import PRIVATE : unit -> C_Int.t
Date.Tm.getWDay = _import PRIVATE : unit -> C_Int.t
Date.Tm.getYDay = _import PRIVATE : unit -> C_Int.t
Date.Tm.getYear = _import PRIVATE : unit -> C_Int.t
Date.Tm.setHour = _import PRIVATE : C_Int.t -> unit
Date.Tm.setIsDst = _import PRIVATE : C_Int.t -> unit
Date.Tm.setMDay = _import PRIVATE : C_Int.t -> unit
Date.Tm.setMin = _import PRIVATE : C_Int.t -> unit
Date.Tm.setMon = _import PRIVATE : C_Int.t -> unit
Date.Tm.setSec = _import PRIVATE : C_Int.t -> unit
Date.Tm.setWDay = _import PRIVATE : C_Int.t -> unit
Date.Tm.setYDay = _import PRIVATE : C_Int.t -> unit
Date.Tm.setYear = _import PRIVATE : C_Int.t -> unit
Date.gmTime = _import PRIVATE : C_Time.t ref -> C_Int.t C_Errno.t
Date.localOffset = _import PRIVATE : unit -> C_Double.t
Date.localTime = _import PRIVATE : C_Time.t ref -> C_Int.t C_Errno.t
Date.mkTime = _import PRIVATE : unit -> C_Time.t C_Errno.t
Date.strfTime = _import PRIVATE : Char8.t array * C_Size.t * NullString8.t -> C_Size.t
IEEEReal.RoundingMode.FE_DOWNWARD = _const : C_Int.t
IEEEReal.RoundingMode.FE_NOSUPPORT = _const : C_Int.t
IEEEReal.RoundingMode.FE_TONEAREST = _const : C_Int.t
IEEEReal.RoundingMode.FE_TOWARDZERO = _const : C_Int.t
IEEEReal.RoundingMode.FE_UPWARD = _const : C_Int.t
IEEEReal.getRoundingMode = _import PRIVATE : unit -> C_Int.t
IEEEReal.setRoundingMode = _import PRIVATE : C_Int.t -> C_Int.t
MLton.bug = _import PRIVATE __attribute__((noreturn)) : String8.t -> unit
MLton.Itimer.PROF = _const : C_Int.t
MLton.Itimer.REAL = _const : C_Int.t
MLton.Itimer.VIRTUAL = _const : C_Int.t
MLton.Itimer.set = _import PRIVATE : C_Int.t * C_Time.t * C_SUSeconds.t * C_Time.t * C_SUSeconds.t -> C_Int.t C_Errno.t
MLton.Process.spawne = _import PRIVATE : NullString8.t * NullString8.t array * NullString8.t array -> C_PId.t C_Errno.t
MLton.Process.spawnp = _import PRIVATE : NullString8.t * NullString8.t array -> C_PId.t C_Errno.t
MLton.Rlimit.AS = _const : C_Int.t
MLton.Rlimit.CORE = _const : C_Int.t
MLton.Rlimit.CPU = _const : C_Int.t
MLton.Rlimit.DATA = _const : C_Int.t
MLton.Rlimit.FSIZE = _const : C_Int.t
MLton.Rlimit.INFINITY = _const : C_RLim.t
MLton.Rlimit.MEMLOCK = _const : C_Int.t
MLton.Rlimit.NOFILE = _const : C_Int.t
MLton.Rlimit.NPROC = _const : C_Int.t
MLton.Rlimit.RSS = _const : C_Int.t
MLton.Rlimit.STACK = _const : C_Int.t
MLton.Rlimit.get = _import PRIVATE : C_Int.t -> C_Int.t C_Errno.t
MLton.Rlimit.getHard = _import PRIVATE : unit -> C_RLim.t
MLton.Rlimit.getSoft = _import PRIVATE : unit -> C_RLim.t
MLton.Rlimit.set = _import PRIVATE : C_Int.t * C_RLim.t * C_RLim.t -> C_Int.t C_Errno.t
MLton.Rusage.children_stime_sec = _import PRIVATE : unit -> C_Time.t
MLton.Rusage.children_stime_usec = _import PRIVATE : unit -> C_SUSeconds.t
MLton.Rusage.children_utime_sec = _import PRIVATE : unit -> C_Time.t
MLton.Rusage.children_utime_usec = _import PRIVATE : unit -> C_SUSeconds.t
MLton.Rusage.gc_stime_sec = _import PRIVATE : unit -> C_Time.t
MLton.Rusage.gc_stime_usec = _import PRIVATE : unit -> C_SUSeconds.t
MLton.Rusage.gc_utime_sec = _import PRIVATE : unit -> C_Time.t
MLton.Rusage.gc_utime_usec = _import PRIVATE : unit -> C_SUSeconds.t
MLton.Rusage.getrusage = _import PRIVATE : unit -> unit
MLton.Rusage.self_stime_sec = _import PRIVATE : unit -> C_Time.t
MLton.Rusage.self_stime_usec = _import PRIVATE : unit -> C_SUSeconds.t
MLton.Rusage.self_utime_sec = _import PRIVATE : unit -> C_Time.t
MLton.Rusage.self_utime_usec = _import PRIVATE : unit -> C_SUSeconds.t
MLton.Syslog.Facility.LOG_AUTH = _const : C_Int.t
MLton.Syslog.Facility.LOG_CRON = _const : C_Int.t
MLton.Syslog.Facility.LOG_DAEMON = _const : C_Int.t
MLton.Syslog.Facility.LOG_KERN = _const : C_Int.t
MLton.Syslog.Facility.LOG_LOCAL0 = _const : C_Int.t
MLton.Syslog.Facility.LOG_LOCAL1 = _const : C_Int.t
MLton.Syslog.Facility.LOG_LOCAL2 = _const : C_Int.t
MLton.Syslog.Facility.LOG_LOCAL3 = _const : C_Int.t
MLton.Syslog.Facility.LOG_LOCAL4 = _const : C_Int.t
MLton.Syslog.Facility.LOG_LOCAL5 = _const : C_Int.t
MLton.Syslog.Facility.LOG_LOCAL6 = _const : C_Int.t
MLton.Syslog.Facility.LOG_LOCAL7 = _const : C_Int.t
MLton.Syslog.Facility.LOG_LPR = _const : C_Int.t
MLton.Syslog.Facility.LOG_MAIL = _const : C_Int.t
MLton.Syslog.Facility.LOG_NEWS = _const : C_Int.t
MLton.Syslog.Facility.LOG_SYSLOG = _const : C_Int.t
MLton.Syslog.Facility.LOG_USER = _const : C_Int.t
MLton.Syslog.Facility.LOG_UUCP = _const : C_Int.t
MLton.Syslog.Logopt.LOG_CONS = _const : C_Int.t
MLton.Syslog.Logopt.LOG_NDELAY = _const : C_Int.t
MLton.Syslog.Logopt.LOG_NOWAIT = _const : C_Int.t
MLton.Syslog.Logopt.LOG_ODELAY = _const : C_Int.t
MLton.Syslog.Logopt.LOG_PERROR = _const : C_Int.t
MLton.Syslog.Logopt.LOG_PID = _const : C_Int.t
MLton.Syslog.Severity.LOG_ALERT = _const : C_Int.t
MLton.Syslog.Severity.LOG_CRIT = _const : C_Int.t
MLton.Syslog.Severity.LOG_DEBUG = _const : C_Int.t
MLton.Syslog.Severity.LOG_EMERG = _const : C_Int.t
MLton.Syslog.Severity.LOG_ERR = _const : C_Int.t
MLton.Syslog.Severity.LOG_INFO = _const : C_Int.t
MLton.Syslog.Severity.LOG_NOTICE = _const : C_Int.t
MLton.Syslog.Severity.LOG_WARNING = _const : C_Int.t
MLton.Syslog.closelog = _import PRIVATE : unit -> unit
MLton.Syslog.openlog = _import PRIVATE : NullString8.t * C_Int.t * C_Int.t -> unit
MLton.Syslog.syslog = _import PRIVATE : C_Int.t * NullString8.t -> unit
MinGW.getTempPath = _import PRIVATE : C_Size.t * Char8.t array -> C_Size.t
MinGW.setNonBlock = _import PRIVATE : C_Fd.t -> unit
MinGW.clearNonBlock = _import PRIVATE : C_Fd.t -> unit
Net.htonl = _import PRIVATE : Word32.t -> Word32.t
Net.htons = _import PRIVATE : Word16.t -> Word16.t
Net.ntohl = _import PRIVATE : Word32.t -> Word32.t
Net.ntohs = _import PRIVATE : Word16.t -> Word16.t
NetHostDB.INADDR_ANY = _const : C_Int.t
NetHostDB.getByAddress = _import PRIVATE : Word8.t vector * C_Socklen.t -> C_Int.t
NetHostDB.getByName = _import PRIVATE : NullString8.t -> C_Int.t
NetHostDB.getEntryAddrType = _import PRIVATE : unit -> C_Int.t
NetHostDB.getEntryAddrsN = _import PRIVATE : C_Int.t * Word8.t array -> unit
NetHostDB.getEntryAddrsNum = _import PRIVATE : unit -> C_Int.t
NetHostDB.getEntryAliasesN = _import PRIVATE : C_Int.t -> C_String.t
NetHostDB.getEntryAliasesNum = _import PRIVATE : unit -> C_Int.t
NetHostDB.getEntryLength = _import PRIVATE : unit -> C_Int.t
NetHostDB.getEntryName = _import PRIVATE : unit -> C_String.t
NetHostDB.getHostName = _import PRIVATE : Char8.t array * C_Size.t -> C_Int.t C_Errno.t
NetHostDB.inAddrSize = _const : C_Size.t
NetProtDB.getByName = _import PRIVATE : NullString8.t -> C_Int.t
NetProtDB.getByNumber = _import PRIVATE : C_Int.t -> C_Int.t
NetProtDB.getEntryAliasesN = _import PRIVATE : C_Int.t -> C_String.t
NetProtDB.getEntryAliasesNum = _import PRIVATE : unit -> C_Int.t
NetProtDB.getEntryName = _import PRIVATE : unit -> C_String.t
NetProtDB.getEntryProto = _import PRIVATE : unit -> C_Int.t
NetServDB.getByName = _import PRIVATE : NullString8.t * NullString8.t -> C_Int.t
NetServDB.getByNameNull = _import PRIVATE : NullString8.t -> C_Int.t
NetServDB.getByPort = _import PRIVATE : C_Int.t * NullString8.t -> C_Int.t
NetServDB.getByPortNull = _import PRIVATE : C_Int.t -> C_Int.t
NetServDB.getEntryAliasesN = _import PRIVATE : C_Int.t -> C_String.t
NetServDB.getEntryAliasesNum = _import PRIVATE : unit -> C_Int.t
NetServDB.getEntryName = _import PRIVATE : unit -> C_String.t
NetServDB.getEntryPort = _import PRIVATE : unit -> C_Int.t
NetServDB.getEntryProto = _import PRIVATE : unit -> C_String.t
OS.IO.POLLIN = _const : C_Short.t
OS.IO.POLLOUT = _const : C_Short.t
OS.IO.POLLPRI = _const : C_Short.t
OS.IO.poll = _import PRIVATE : C_Fd.t vector * C_Short.t vector * C_NFds.t * C_Int.t * C_Short.t array -> C_Int.t C_Errno.t
Posix.Error.E2BIG = _const : C_Int.t
Posix.Error.EACCES = _const : C_Int.t
Posix.Error.EADDRINUSE = _const : C_Int.t
Posix.Error.EADDRNOTAVAIL = _const : C_Int.t
Posix.Error.EAFNOSUPPORT = _const : C_Int.t
Posix.Error.EAGAIN = _const : C_Int.t
Posix.Error.EALREADY = _const : C_Int.t
Posix.Error.EBADF = _const : C_Int.t
Posix.Error.EBADMSG = _const : C_Int.t
Posix.Error.EBUSY = _const : C_Int.t
Posix.Error.ECANCELED = _const : C_Int.t
Posix.Error.ECHILD = _const : C_Int.t
Posix.Error.ECONNABORTED = _const : C_Int.t
Posix.Error.ECONNREFUSED = _const : C_Int.t
Posix.Error.ECONNRESET = _const : C_Int.t
Posix.Error.EDEADLK = _const : C_Int.t
Posix.Error.EDESTADDRREQ = _const : C_Int.t
Posix.Error.EDOM = _const : C_Int.t
Posix.Error.EDQUOT = _const : C_Int.t
Posix.Error.EEXIST = _const : C_Int.t
Posix.Error.EFAULT = _const : C_Int.t
Posix.Error.EFBIG = _const : C_Int.t
Posix.Error.EHOSTUNREACH = _const : C_Int.t
Posix.Error.EIDRM = _const : C_Int.t
Posix.Error.EILSEQ = _const : C_Int.t
Posix.Error.EINPROGRESS = _const : C_Int.t
Posix.Error.EINTR = _const : C_Int.t
Posix.Error.EINVAL = _const : C_Int.t
Posix.Error.EIO = _const : C_Int.t
Posix.Error.EISCONN = _const : C_Int.t
Posix.Error.EISDIR = _const : C_Int.t
Posix.Error.ELOOP = _const : C_Int.t
Posix.Error.EMFILE = _const : C_Int.t
Posix.Error.EMLINK = _const : C_Int.t
Posix.Error.EMSGSIZE = _const : C_Int.t
Posix.Error.EMULTIHOP = _const : C_Int.t
Posix.Error.ENAMETOOLONG = _const : C_Int.t
Posix.Error.ENETDOWN = _const : C_Int.t
Posix.Error.ENETRESET = _const : C_Int.t
Posix.Error.ENETUNREACH = _const : C_Int.t
Posix.Error.ENFILE = _const : C_Int.t
Posix.Error.ENOBUFS = _const : C_Int.t
Posix.Error.ENODATA = _const : C_Int.t
Posix.Error.ENODEV = _const : C_Int.t
Posix.Error.ENOENT = _const : C_Int.t
Posix.Error.ENOEXEC = _const : C_Int.t
Posix.Error.ENOLCK = _const : C_Int.t
Posix.Error.ENOLINK = _const : C_Int.t
Posix.Error.ENOMEM = _const : C_Int.t
Posix.Error.ENOMSG = _const : C_Int.t
Posix.Error.ENOPROTOOPT = _const : C_Int.t
Posix.Error.ENOSPC = _const : C_Int.t
Posix.Error.ENOSR = _const : C_Int.t
Posix.Error.ENOSTR = _const : C_Int.t
Posix.Error.ENOSYS = _const : C_Int.t
Posix.Error.ENOTCONN = _const : C_Int.t
Posix.Error.ENOTDIR = _const : C_Int.t
Posix.Error.ENOTEMPTY = _const : C_Int.t
Posix.Error.ENOTSOCK = _const : C_Int.t
Posix.Error.ENOTSUP = _const : C_Int.t
Posix.Error.ENOTTY = _const : C_Int.t
Posix.Error.ENXIO = _const : C_Int.t
Posix.Error.EOPNOTSUPP = _const : C_Int.t
Posix.Error.EOVERFLOW = _const : C_Int.t
Posix.Error.EPERM = _const : C_Int.t
Posix.Error.EPIPE = _const : C_Int.t
Posix.Error.EPROTO = _const : C_Int.t
Posix.Error.EPROTONOSUPPORT = _const : C_Int.t
Posix.Error.EPROTOTYPE = _const : C_Int.t
Posix.Error.ERANGE = _const : C_Int.t
Posix.Error.EROFS = _const : C_Int.t
Posix.Error.ESPIPE = _const : C_Int.t
Posix.Error.ESRCH = _const : C_Int.t
Posix.Error.ESTALE = _const : C_Int.t
Posix.Error.ETIME = _const : C_Int.t
Posix.Error.ETIMEDOUT = _const : C_Int.t
Posix.Error.ETXTBSY = _const : C_Int.t
Posix.Error.EWOULDBLOCK = _const : C_Int.t
Posix.Error.EXDEV = _const : C_Int.t
Posix.Error.clearErrno = _import PRIVATE : unit -> unit
Posix.Error.getErrno = _import PRIVATE : unit -> C_Int.t
Posix.Error.strError = _import PRIVATE : C_Int.t -> C_String.t
Posix.FileSys.A.F_OK = _const : C_Int.t
Posix.FileSys.A.R_OK = _const : C_Int.t
Posix.FileSys.A.W_OK = _const : C_Int.t
Posix.FileSys.A.X_OK = _const : C_Int.t
Posix.FileSys.Dirstream.closeDir = _import PRIVATE : C_DirP.t -> C_Int.t C_Errno.t
Posix.FileSys.Dirstream.openDir = _import PRIVATE : NullString8.t -> C_DirP.t C_Errno.t
Posix.FileSys.Dirstream.readDir = _import PRIVATE : C_DirP.t -> C_String.t C_Errno.t
Posix.FileSys.Dirstream.rewindDir = _import PRIVATE : C_DirP.t -> unit
Posix.FileSys.O.APPEND = _const : C_Int.t
Posix.FileSys.O.BINARY = _const : C_Int.t
Posix.FileSys.O.CREAT = _const : C_Int.t
Posix.FileSys.O.DSYNC = _const : C_Int.t
Posix.FileSys.O.EXCL = _const : C_Int.t
Posix.FileSys.O.NOCTTY = _const : C_Int.t
Posix.FileSys.O.NONBLOCK = _const : C_Int.t
Posix.FileSys.O.RDONLY = _const : C_Int.t
Posix.FileSys.O.RDWR = _const : C_Int.t
Posix.FileSys.O.RSYNC = _const : C_Int.t
Posix.FileSys.O.SYNC = _const : C_Int.t
Posix.FileSys.O.TEXT = _const : C_Int.t
Posix.FileSys.O.TRUNC = _const : C_Int.t
Posix.FileSys.O.WRONLY = _const : C_Int.t
Posix.FileSys.PC.ALLOC_SIZE_MIN = _const : C_Int.t
Posix.FileSys.PC.ASYNC_IO = _const : C_Int.t
Posix.FileSys.PC.CHOWN_RESTRICTED = _const : C_Int.t
Posix.FileSys.PC.FILESIZEBITS = _const : C_Int.t
Posix.FileSys.PC.LINK_MAX = _const : C_Int.t
Posix.FileSys.PC.MAX_CANON = _const : C_Int.t
Posix.FileSys.PC.MAX_INPUT = _const : C_Int.t
Posix.FileSys.PC.NAME_MAX = _const : C_Int.t
Posix.FileSys.PC.NO_TRUNC = _const : C_Int.t
Posix.FileSys.PC.PATH_MAX = _const : C_Int.t
Posix.FileSys.PC.PIPE_BUF = _const : C_Int.t
Posix.FileSys.PC.PRIO_IO = _const : C_Int.t
Posix.FileSys.PC.REC_INCR_XFER_SIZE = _const : C_Int.t
Posix.FileSys.PC.REC_MAX_XFER_SIZE = _const : C_Int.t
Posix.FileSys.PC.REC_MIN_XFER_SIZE = _const : C_Int.t
Posix.FileSys.PC.REC_XFER_ALIGN = _const : C_Int.t
Posix.FileSys.PC.SYMLINK_MAX = _const : C_Int.t
Posix.FileSys.PC.SYNC_IO = _const : C_Int.t
Posix.FileSys.PC.TWO_SYMLINKS = _const : C_Int.t
Posix.FileSys.PC.VDISABLE = _const : C_Int.t
Posix.FileSys.S.IFBLK = _const : C_Mode.t
Posix.FileSys.S.IFCHR = _const : C_Mode.t
Posix.FileSys.S.IFDIR = _const : C_Mode.t
Posix.FileSys.S.IFIFO = _const : C_Mode.t
Posix.FileSys.S.IFLNK = _const : C_Mode.t
Posix.FileSys.S.IFMT = _const : C_Mode.t
Posix.FileSys.S.IFREG = _const : C_Mode.t
Posix.FileSys.S.IFSOCK = _const : C_Mode.t
Posix.FileSys.S.IRGRP = _const : C_Mode.t
Posix.FileSys.S.IROTH = _const : C_Mode.t
Posix.FileSys.S.IRUSR = _const : C_Mode.t
Posix.FileSys.S.IRWXG = _const : C_Mode.t
Posix.FileSys.S.IRWXO = _const : C_Mode.t
Posix.FileSys.S.IRWXU = _const : C_Mode.t
Posix.FileSys.S.ISGID = _const : C_Mode.t
Posix.FileSys.S.ISUID = _const : C_Mode.t
Posix.FileSys.S.ISVTX = _const : C_Mode.t
Posix.FileSys.S.IWGRP = _const : C_Mode.t
Posix.FileSys.S.IWOTH = _const : C_Mode.t
Posix.FileSys.S.IWUSR = _const : C_Mode.t
Posix.FileSys.S.IXGRP = _const : C_Mode.t
Posix.FileSys.S.IXOTH = _const : C_Mode.t
Posix.FileSys.S.IXUSR = _const : C_Mode.t
Posix.FileSys.ST.isBlk = _import PRIVATE : C_Mode.t -> C_Int.t
Posix.FileSys.ST.isChr = _import PRIVATE : C_Mode.t -> C_Int.t
Posix.FileSys.ST.isDir = _import PRIVATE : C_Mode.t -> C_Int.t
Posix.FileSys.ST.isFIFO = _import PRIVATE : C_Mode.t -> C_Int.t
Posix.FileSys.ST.isLink = _import PRIVATE : C_Mode.t -> C_Int.t
Posix.FileSys.ST.isReg = _import PRIVATE : C_Mode.t -> C_Int.t
Posix.FileSys.ST.isSock = _import PRIVATE : C_Mode.t -> C_Int.t
Posix.FileSys.Stat.fstat = _import PRIVATE : C_Fd.t -> C_Int.t C_Errno.t
Posix.FileSys.Stat.getATime = _import PRIVATE : unit -> C_Time.t
# Posix.FileSys.Stat.getBlkCnt = _import PRIVATE : unit -> C_BlkCnt.t
# Posix.FileSys.Stat.getBlkSize = _import PRIVATE : unit -> C_BlkSize.t
Posix.FileSys.Stat.getCTime = _import PRIVATE : unit -> C_Time.t
Posix.FileSys.Stat.getDev = _import PRIVATE : unit -> C_Dev.t
Posix.FileSys.Stat.getGId = _import PRIVATE : unit -> C_GId.t
Posix.FileSys.Stat.getINo = _import PRIVATE : unit -> C_INo.t
Posix.FileSys.Stat.getMTime = _import PRIVATE : unit -> C_Time.t
Posix.FileSys.Stat.getMode = _import PRIVATE : unit -> C_Mode.t
Posix.FileSys.Stat.getNLink = _import PRIVATE : unit -> C_NLink.t
Posix.FileSys.Stat.getRDev = _import PRIVATE : unit -> C_Dev.t
Posix.FileSys.Stat.getSize = _import PRIVATE : unit -> C_Off.t
Posix.FileSys.Stat.getUId = _import PRIVATE : unit -> C_UId.t
Posix.FileSys.Stat.lstat = _import PRIVATE : NullString8.t -> C_Int.t C_Errno.t
Posix.FileSys.Stat.stat = _import PRIVATE : NullString8.t -> C_Int.t C_Errno.t
Posix.FileSys.Utimbuf.setAcTime = _import PRIVATE : C_Time.t -> unit
Posix.FileSys.Utimbuf.setModTime = _import PRIVATE : C_Time.t -> unit
Posix.FileSys.Utimbuf.utime = _import PRIVATE : NullString8.t -> C_Int.t C_Errno.t
Posix.FileSys.access = _import PRIVATE : NullString8.t * C_Int.t -> C_Int.t C_Errno.t
Posix.FileSys.chdir = _import PRIVATE : NullString8.t -> C_Int.t C_Errno.t
Posix.FileSys.chmod = _import PRIVATE : NullString8.t * C_Mode.t -> C_Int.t C_Errno.t
Posix.FileSys.chown = _import PRIVATE : NullString8.t * C_UId.t * C_GId.t -> C_Int.t C_Errno.t
Posix.FileSys.fchdir = _import PRIVATE : C_Fd.t -> C_Int.t C_Errno.t
Posix.FileSys.fchmod = _import PRIVATE : C_Fd.t * C_Mode.t -> C_Int.t C_Errno.t
Posix.FileSys.fchown = _import PRIVATE : C_Fd.t * C_UId.t * C_GId.t -> C_Int.t C_Errno.t
Posix.FileSys.fpathconf = _import PRIVATE : C_Fd.t * C_Int.t -> C_Long.t C_Errno.t
Posix.FileSys.ftruncate = _import PRIVATE : C_Fd.t * C_Off.t -> C_Int.t C_Errno.t
Posix.FileSys.getcwd = _import PRIVATE : Char8.t array * C_Size.t -> C_String.t C_Errno.t
Posix.FileSys.link = _import PRIVATE : NullString8.t * NullString8.t -> C_Int.t C_Errno.t
Posix.FileSys.mkdir = _import PRIVATE : NullString8.t * C_Mode.t -> C_Int.t C_Errno.t
Posix.FileSys.mkfifo = _import PRIVATE : NullString8.t * C_Mode.t -> C_Int.t C_Errno.t
Posix.FileSys.open2 = _import PRIVATE : NullString8.t * C_Int.t -> C_Fd.t C_Errno.t
Posix.FileSys.open3 = _import PRIVATE : NullString8.t * C_Int.t * C_Mode.t -> C_Fd.t C_Errno.t
Posix.FileSys.pathconf = _import PRIVATE : NullString8.t * C_Int.t -> C_Long.t C_Errno.t
Posix.FileSys.readlink = _import PRIVATE : NullString8.t * Char8.t array * C_Size.t -> C_SSize.t C_Errno.t
Posix.FileSys.rename = _import PRIVATE : NullString8.t * NullString8.t -> C_Int.t C_Errno.t
Posix.FileSys.rmdir = _import PRIVATE : NullString8.t -> C_Int.t C_Errno.t
Posix.FileSys.symlink = _import PRIVATE : NullString8.t * NullString8.t -> C_Int.t C_Errno.t
Posix.FileSys.truncate = _import PRIVATE : NullString8.t * C_Off.t -> C_Int.t C_Errno.t
Posix.FileSys.umask = _import PRIVATE : C_Mode.t -> C_Mode.t
Posix.FileSys.unlink = _import PRIVATE : NullString8.t -> C_Int.t C_Errno.t
Posix.IO.FD.CLOEXEC = _const : C_Int.t
Posix.IO.FLock.F_GETLK = _const : C_Int.t
Posix.IO.FLock.F_RDLCK = _const : C_Short.t 
Posix.IO.FLock.F_SETLK = _const : C_Int.t
Posix.IO.FLock.F_SETLKW = _const : C_Int.t
Posix.IO.FLock.F_UNLCK = _const : C_Short.t 
Posix.IO.FLock.F_WRLCK = _const : C_Short.t 
Posix.IO.FLock.SEEK_CUR = _const : C_Short.t
Posix.IO.FLock.SEEK_END= _const : C_Short.t
Posix.IO.FLock.SEEK_SET = _const : C_Short.t
Posix.IO.FLock.fcntl = _import PRIVATE : C_Fd.t * C_Int.t -> C_Int.t C_Errno.t
Posix.IO.FLock.getLen = _import PRIVATE : unit -> C_Off.t
Posix.IO.FLock.getPId = _import PRIVATE : unit -> C_PId.t
Posix.IO.FLock.getStart = _import PRIVATE : unit -> C_Off.t
Posix.IO.FLock.getType = _import PRIVATE : unit -> C_Short.t
Posix.IO.FLock.getWhence = _import PRIVATE : unit -> C_Short.t
Posix.IO.FLock.setLen = _import PRIVATE : C_Off.t -> unit
Posix.IO.FLock.setPId = _import PRIVATE : C_PId.t -> unit
Posix.IO.FLock.setStart = _import PRIVATE : C_Off.t -> unit
Posix.IO.FLock.setType = _import PRIVATE : C_Short.t -> unit
Posix.IO.FLock.setWhence = _import PRIVATE : C_Short.t -> unit
Posix.IO.F_DUPFD = _const : C_Int.t
Posix.IO.F_GETFD = _const : C_Int.t
Posix.IO.F_GETFL = _const : C_Int.t
Posix.IO.F_GETOWN = _const : C_Int.t
Posix.IO.F_SETFD = _const : C_Int.t
Posix.IO.F_SETFL = _const : C_Int.t
Posix.IO.F_SETOWN = _const : C_Int.t
Posix.IO.O_ACCMODE = _const : C_Int.t
Posix.IO.SEEK_CUR = _const : C_Int.t
Posix.IO.SEEK_END= _const : C_Int.t
Posix.IO.SEEK_SET = _const : C_Int.t
Posix.IO.close = _import PRIVATE : C_Fd.t -> C_Int.t C_Errno.t
Posix.IO.dup = _import PRIVATE : C_Fd.t -> C_Fd.t C_Errno.t
Posix.IO.dup2 = _import PRIVATE : C_Fd.t * C_Fd.t -> C_Fd.t C_Errno.t
Posix.IO.fcntl2 = _import PRIVATE : C_Fd.t * C_Int.t -> C_Int.t C_Errno.t
Posix.IO.fcntl3 = _import PRIVATE : C_Fd.t * C_Int.t * C_Int.t -> C_Int.t C_Errno.t
Posix.IO.fsync = _import PRIVATE : C_Fd.t -> C_Int.t C_Errno.t
Posix.IO.lseek = _import PRIVATE : C_Fd.t * C_Off.t * C_Int.t -> C_Off.t C_Errno.t
Posix.IO.pipe = _import PRIVATE : C_Fd.t array -> C_Int.t C_Errno.t
Posix.IO.readChar8 = _import PRIVATE : C_Fd.t * Char8.t array * C_Int.t * C_Size.t -> C_SSize.t C_Errno.t
Posix.IO.readWord8 = _import PRIVATE : C_Fd.t * Word8.t array * C_Int.t * C_Size.t -> C_SSize.t C_Errno.t
Posix.IO.setbin = _import PRIVATE : C_Fd.t -> unit
Posix.IO.settext = _import PRIVATE : C_Fd.t -> unit
Posix.IO.writeChar8Arr = _import PRIVATE : C_Fd.t * Char8.t array * C_Int.t * C_Size.t -> C_SSize.t C_Errno.t
Posix.IO.writeChar8Vec = _import PRIVATE : C_Fd.t * Char8.t vector * C_Int.t * C_Size.t -> C_SSize.t C_Errno.t
Posix.IO.writeWord8Arr = _import PRIVATE : C_Fd.t * Word8.t array * C_Int.t * C_Size.t -> C_SSize.t C_Errno.t
Posix.IO.writeWord8Vec = _import PRIVATE : C_Fd.t * Word8.t vector * C_Int.t * C_Size.t -> C_SSize.t C_Errno.t
Posix.ProcEnv.SC_2_CHAR_TERM = _const : C_Int.t
Posix.ProcEnv.SC_2_C_BIND = _const : C_Int.t
Posix.ProcEnv.SC_2_C_DEV = _const : C_Int.t
Posix.ProcEnv.SC_2_FORT_DEV = _const : C_Int.t
Posix.ProcEnv.SC_2_FORT_RUN = _const : C_Int.t
Posix.ProcEnv.SC_2_LOCALEDEF = _const : C_Int.t
Posix.ProcEnv.SC_2_PBS = _const : C_Int.t
Posix.ProcEnv.SC_2_PBS_ACCOUNTING = _const : C_Int.t
Posix.ProcEnv.SC_2_PBS_CHECKPOINT = _const : C_Int.t
Posix.ProcEnv.SC_2_PBS_LOCATE = _const : C_Int.t
Posix.ProcEnv.SC_2_PBS_MESSAGE = _const : C_Int.t
Posix.ProcEnv.SC_2_PBS_TRACK = _const : C_Int.t
Posix.ProcEnv.SC_2_SW_DEV = _const : C_Int.t
Posix.ProcEnv.SC_2_UPE = _const : C_Int.t
Posix.ProcEnv.SC_2_VERSION = _const : C_Int.t
Posix.ProcEnv.SC_ADVISORY_INFO = _const : C_Int.t
Posix.ProcEnv.SC_AIO_LISTIO_MAX = _const : C_Int.t
Posix.ProcEnv.SC_AIO_MAX = _const : C_Int.t
Posix.ProcEnv.SC_AIO_PRIO_DELTA_MAX = _const : C_Int.t
Posix.ProcEnv.SC_ARG_MAX = _const : C_Int.t
Posix.ProcEnv.SC_ASYNCHRONOUS_IO = _const : C_Int.t
Posix.ProcEnv.SC_ATEXIT_MAX = _const : C_Int.t
Posix.ProcEnv.SC_AVPHYS_PAGES = _const : C_Int.t
Posix.ProcEnv.SC_BARRIERS = _const : C_Int.t
Posix.ProcEnv.SC_BC_BASE_MAX = _const : C_Int.t
Posix.ProcEnv.SC_BC_DIM_MAX = _const : C_Int.t
Posix.ProcEnv.SC_BC_SCALE_MAX = _const : C_Int.t
Posix.ProcEnv.SC_BC_STRING_MAX = _const : C_Int.t
Posix.ProcEnv.SC_CHILD_MAX = _const : C_Int.t
Posix.ProcEnv.SC_CLK_TCK = _const : C_Int.t
Posix.ProcEnv.SC_CLOCK_SELECTION = _const : C_Int.t
Posix.ProcEnv.SC_COLL_WEIGHTS_MAX = _const : C_Int.t
Posix.ProcEnv.SC_CPUTIME = _const : C_Int.t
Posix.ProcEnv.SC_DELAYTIMER_MAX = _const : C_Int.t
Posix.ProcEnv.SC_EXPR_NEST_MAX = _const : C_Int.t
Posix.ProcEnv.SC_FSYNC = _const : C_Int.t
Posix.ProcEnv.SC_GETGR_R_SIZE_MAX = _const : C_Int.t
Posix.ProcEnv.SC_GETPW_R_SIZE_MAX = _const : C_Int.t
Posix.ProcEnv.SC_HOST_NAME_MAX = _const : C_Int.t
Posix.ProcEnv.SC_IOV_MAX = _const : C_Int.t
Posix.ProcEnv.SC_IPV6 = _const : C_Int.t
Posix.ProcEnv.SC_JOB_CONTROL = _const : C_Int.t
Posix.ProcEnv.SC_LINE_MAX = _const : C_Int.t
Posix.ProcEnv.SC_LOGIN_NAME_MAX = _const : C_Int.t
Posix.ProcEnv.SC_MAPPED_FILES = _const : C_Int.t
Posix.ProcEnv.SC_MEMLOCK = _const : C_Int.t
Posix.ProcEnv.SC_MEMLOCK_RANGE = _const : C_Int.t
Posix.ProcEnv.SC_MEMORY_PROTECTION = _const : C_Int.t
Posix.ProcEnv.SC_MESSAGE_PASSING = _const : C_Int.t
Posix.ProcEnv.SC_MONOTONIC_CLOCK = _const : C_Int.t
Posix.ProcEnv.SC_MQ_OPEN_MAX = _const : C_Int.t
Posix.ProcEnv.SC_MQ_PRIO_MAX = _const : C_Int.t
Posix.ProcEnv.SC_NGROUPS_MAX = _const : C_Int.t
Posix.ProcEnv.SC_NPROCESSORS_CONF = _const : C_Int.t
Posix.ProcEnv.SC_NPROCESSORS_ONLN = _const : C_Int.t
Posix.ProcEnv.SC_OPEN_MAX = _const : C_Int.t
Posix.ProcEnv.SC_PAGESIZE = _const : C_Int.t
Posix.ProcEnv.SC_PAGE_SIZE = _const : C_Int.t
Posix.ProcEnv.SC_PHYS_PAGES = _const : C_Int.t
Posix.ProcEnv.SC_PRIORITIZED_IO = _const : C_Int.t
Posix.ProcEnv.SC_PRIORITY_SCHEDULING = _const : C_Int.t
Posix.ProcEnv.SC_RAW_SOCKETS = _const : C_Int.t
Posix.ProcEnv.SC_READER_WRITER_LOCKS = _const : C_Int.t
Posix.ProcEnv.SC_REALTIME_SIGNALS = _const : C_Int.t
Posix.ProcEnv.SC_REGEXP = _const : C_Int.t
Posix.ProcEnv.SC_RE_DUP_MAX = _const : C_Int.t
Posix.ProcEnv.SC_RTSIG_MAX = _const : C_Int.t
Posix.ProcEnv.SC_SAVED_IDS = _const : C_Int.t
Posix.ProcEnv.SC_SEMAPHORES = _const : C_Int.t
Posix.ProcEnv.SC_SEM_NSEMS_MAX = _const : C_Int.t
Posix.ProcEnv.SC_SEM_VALUE_MAX = _const : C_Int.t
Posix.ProcEnv.SC_SHARED_MEMORY_OBJECTS = _const : C_Int.t
Posix.ProcEnv.SC_SHELL = _const : C_Int.t
Posix.ProcEnv.SC_SIGQUEUE_MAX = _const : C_Int.t
Posix.ProcEnv.SC_SPAWN = _const : C_Int.t
Posix.ProcEnv.SC_SPIN_LOCKS = _const : C_Int.t
Posix.ProcEnv.SC_SPORADIC_SERVER = _const : C_Int.t
Posix.ProcEnv.SC_SS_REPL_MAX = _const : C_Int.t
Posix.ProcEnv.SC_STREAM_MAX = _const : C_Int.t
Posix.ProcEnv.SC_SYMLOOP_MAX = _const : C_Int.t
Posix.ProcEnv.SC_SYNCHRONIZED_IO = _const : C_Int.t
Posix.ProcEnv.SC_THREADS = _const : C_Int.t
Posix.ProcEnv.SC_THREAD_ATTR_STACKADDR = _const : C_Int.t
Posix.ProcEnv.SC_THREAD_ATTR_STACKSIZE = _const : C_Int.t
Posix.ProcEnv.SC_THREAD_CPUTIME = _const : C_Int.t
Posix.ProcEnv.SC_THREAD_DESTRUCTOR_ITERATIONS = _const : C_Int.t
Posix.ProcEnv.SC_THREAD_KEYS_MAX = _const : C_Int.t
Posix.ProcEnv.SC_THREAD_PRIORITY_SCHEDULING = _const : C_Int.t
Posix.ProcEnv.SC_THREAD_PRIO_INHERIT = _const : C_Int.t
Posix.ProcEnv.SC_THREAD_PRIO_PROTECT = _const : C_Int.t
Posix.ProcEnv.SC_THREAD_PROCESS_SHARED = _const : C_Int.t
Posix.ProcEnv.SC_THREAD_SAFE_FUNCTIONS = _const : C_Int.t
Posix.ProcEnv.SC_THREAD_SPORADIC_SERVER = _const : C_Int.t
Posix.ProcEnv.SC_THREAD_STACK_MIN = _const : C_Int.t
Posix.ProcEnv.SC_THREAD_THREADS_MAX = _const : C_Int.t
Posix.ProcEnv.SC_TIMEOUTS = _const : C_Int.t
Posix.ProcEnv.SC_TIMERS = _const : C_Int.t
Posix.ProcEnv.SC_TIMER_MAX = _const : C_Int.t
Posix.ProcEnv.SC_TRACE = _const : C_Int.t
Posix.ProcEnv.SC_TRACE_EVENT_FILTER = _const : C_Int.t
Posix.ProcEnv.SC_TRACE_EVENT_NAME_MAX = _const : C_Int.t
Posix.ProcEnv.SC_TRACE_INHERIT = _const : C_Int.t
Posix.ProcEnv.SC_TRACE_LOG = _const : C_Int.t
Posix.ProcEnv.SC_TRACE_NAME_MAX = _const : C_Int.t
Posix.ProcEnv.SC_TRACE_SYS_MAX = _const : C_Int.t
Posix.ProcEnv.SC_TRACE_USER_EVENT_MAX = _const : C_Int.t
Posix.ProcEnv.SC_TTY_NAME_MAX = _const : C_Int.t
Posix.ProcEnv.SC_TYPED_MEMORY_OBJECTS = _const : C_Int.t
Posix.ProcEnv.SC_TZNAME_MAX = _const : C_Int.t
Posix.ProcEnv.SC_V6_ILP32_OFF32 = _const : C_Int.t
Posix.ProcEnv.SC_V6_ILP32_OFFBIG = _const : C_Int.t
Posix.ProcEnv.SC_V6_LP64_OFF64 = _const : C_Int.t
Posix.ProcEnv.SC_V6_LPBIG_OFFBIG = _const : C_Int.t
Posix.ProcEnv.SC_VERSION = _const : C_Int.t
Posix.ProcEnv.SC_XBS5_ILP32_OFF32 = _const : C_Int.t
Posix.ProcEnv.SC_XBS5_ILP32_OFFBIG = _const : C_Int.t
Posix.ProcEnv.SC_XBS5_LP64_OFF64 = _const : C_Int.t
Posix.ProcEnv.SC_XBS5_LPBIG_OFFBIG = _const : C_Int.t
Posix.ProcEnv.SC_XOPEN_CRYPT = _const : C_Int.t
Posix.ProcEnv.SC_XOPEN_ENH_I18N = _const : C_Int.t
Posix.ProcEnv.SC_XOPEN_LEGACY = _const : C_Int.t
Posix.ProcEnv.SC_XOPEN_REALTIME = _const : C_Int.t
Posix.ProcEnv.SC_XOPEN_REALTIME_THREADS = _const : C_Int.t
Posix.ProcEnv.SC_XOPEN_SHM = _const : C_Int.t
Posix.ProcEnv.SC_XOPEN_STREAMS = _const : C_Int.t
Posix.ProcEnv.SC_XOPEN_UNIX = _const : C_Int.t
Posix.ProcEnv.SC_XOPEN_VERSION = _const : C_Int.t
Posix.ProcEnv.Times.getCSTime = _import PRIVATE : unit -> C_Clock.t
Posix.ProcEnv.Times.getCUTime = _import PRIVATE : unit -> C_Clock.t
Posix.ProcEnv.Times.getSTime = _import PRIVATE : unit -> C_Clock.t
Posix.ProcEnv.Times.getUTime = _import PRIVATE : unit -> C_Clock.t
Posix.ProcEnv.Uname.getMachine = _import PRIVATE : unit -> C_String.t
Posix.ProcEnv.Uname.getNodeName = _import PRIVATE : unit -> C_String.t
Posix.ProcEnv.Uname.getRelease = _import PRIVATE : unit -> C_String.t
Posix.ProcEnv.Uname.getSysName = _import PRIVATE : unit -> C_String.t
Posix.ProcEnv.Uname.getVersion = _import PRIVATE : unit -> C_String.t
Posix.ProcEnv.ctermid = _import PRIVATE : unit -> C_String.t
Posix.ProcEnv.environ = _symbol : C_StringArray.t
Posix.ProcEnv.getegid = _import PRIVATE : unit -> C_GId.t
Posix.ProcEnv.getenv = _import PRIVATE : NullString8.t -> C_String.t
Posix.ProcEnv.geteuid = _import PRIVATE : unit -> C_UId.t
Posix.ProcEnv.getgid = _import PRIVATE : unit -> C_GId.t
Posix.ProcEnv.getgroups = _import PRIVATE : C_Int.t * C_GId.t array -> C_Int.t C_Errno.t
Posix.ProcEnv.getgroupsN = _import PRIVATE : unit -> C_Int.t
Posix.ProcEnv.getlogin = _import PRIVATE : unit -> C_String.t C_Errno.t
Posix.ProcEnv.getpgrp = _import PRIVATE : unit -> C_PId.t
Posix.ProcEnv.getpid = _import PRIVATE : unit -> C_PId.t
Posix.ProcEnv.getppid = _import PRIVATE : unit -> C_PId.t
Posix.ProcEnv.getuid = _import PRIVATE : unit -> C_UId.t
Posix.ProcEnv.isatty = _import PRIVATE : C_Fd.t -> C_Int.t
Posix.ProcEnv.setenv = _import PRIVATE : NullString8.t * NullString8.t -> C_Int.t C_Errno.t
Posix.ProcEnv.setgid = _import PRIVATE : C_GId.t -> C_Int.t C_Errno.t
Posix.ProcEnv.setgroups = _import PRIVATE : C_Int.t * C_GId.t vector -> C_Int.t C_Errno.t
Posix.ProcEnv.setpgid = _import PRIVATE : C_PId.t * C_PId.t -> C_Int.t C_Errno.t
Posix.ProcEnv.setsid = _import PRIVATE : unit -> C_PId.t C_Errno.t
Posix.ProcEnv.setuid = _import PRIVATE : C_UId.t -> C_Int.t C_Errno.t
Posix.ProcEnv.sysconf = _import PRIVATE : C_Int.t -> C_Long.t C_Errno.t
Posix.ProcEnv.times = _import PRIVATE : unit -> C_Clock.t C_Errno.t
Posix.ProcEnv.ttyname = _import PRIVATE : C_Fd.t -> C_String.t C_Errno.t
Posix.ProcEnv.uname = _import PRIVATE : unit -> C_Int.t C_Errno.t
# Posix.Process.W.CONTINUED = _const : C_Int.t
Posix.Process.W.NOHANG = _const : C_Int.t
Posix.Process.W.UNTRACED = _const : C_Int.t
Posix.Process.alarm = _import PRIVATE : C_UInt.t -> C_UInt.t
Posix.Process.exece = _import PRIVATE : NullString8.t * NullString8.t array * NullString8.t array -> C_Int.t C_Errno.t
Posix.Process.execp = _import PRIVATE : NullString8.t * NullString8.t array -> C_Int.t C_Errno.t
Posix.Process.exit = _import PRIVATE __attribute__((noreturn)) : C_Status.t -> unit
Posix.Process.exitStatus = _import PRIVATE : C_Status.t -> C_Int.t
Posix.Process.fork = _import PRIVATE : unit -> C_PId.t C_Errno.t
Posix.Process.ifExited = _import PRIVATE : C_Status.t -> C_Int.t
Posix.Process.ifSignaled = _import PRIVATE : C_Status.t -> C_Int.t
Posix.Process.ifStopped = _import PRIVATE : C_Status.t -> C_Int.t
Posix.Process.kill = _import PRIVATE : C_PId.t * C_Signal.t -> C_Int.t C_Errno.t
Posix.Process.nanosleep = _import PRIVATE : C_Time.t ref * C_Long.t ref -> C_Int.t C_Errno.t
Posix.Process.pause = _import PRIVATE : unit -> C_Int.t C_Errno.t
Posix.Process.sleep = _import PRIVATE : C_UInt.t -> C_UInt.t
Posix.Process.stopSig = _import PRIVATE : C_Status.t -> C_Signal.t
Posix.Process.system = _import PRIVATE : NullString8.t -> C_Status.t C_Errno.t
Posix.Process.termSig = _import PRIVATE : C_Status.t -> C_Signal.t
Posix.Process.waitpid = _import PRIVATE : C_PId.t * C_Status.t ref * C_Int.t -> C_PId.t C_Errno.t
Posix.Signal.NSIG = _const : C_Int.t
Posix.Signal.SIGABRT = _const : C_Signal.t
Posix.Signal.SIGALRM = _const : C_Signal.t
Posix.Signal.SIGBUS = _const : C_Signal.t
Posix.Signal.SIGCHLD = _const : C_Signal.t
Posix.Signal.SIGCONT = _const : C_Signal.t
Posix.Signal.SIGFPE = _const : C_Signal.t
Posix.Signal.SIGHUP = _const : C_Signal.t
Posix.Signal.SIGILL = _const : C_Signal.t
Posix.Signal.SIGINT = _const : C_Signal.t
Posix.Signal.SIGKILL = _const : C_Signal.t
Posix.Signal.SIGPIPE = _const : C_Signal.t
Posix.Signal.SIGPOLL = _const : C_Signal.t
Posix.Signal.SIGPROF = _const : C_Signal.t
Posix.Signal.SIGQUIT = _const : C_Signal.t
Posix.Signal.SIGSEGV = _const : C_Signal.t
Posix.Signal.SIGSTOP = _const : C_Signal.t
Posix.Signal.SIGSYS = _const : C_Signal.t
Posix.Signal.SIGTERM = _const : C_Signal.t
Posix.Signal.SIGTRAP = _const : C_Signal.t
Posix.Signal.SIGTSTP = _const : C_Signal.t
Posix.Signal.SIGTTIN = _const : C_Signal.t
Posix.Signal.SIGTTOU = _const : C_Signal.t
Posix.Signal.SIGURG = _const : C_Signal.t
Posix.Signal.SIGUSR1 = _const : C_Signal.t
Posix.Signal.SIGUSR2 = _const : C_Signal.t
Posix.Signal.SIGVTALRM = _const : C_Signal.t
Posix.Signal.SIGXCPU = _const : C_Signal.t
Posix.Signal.SIGXFSZ = _const : C_Signal.t
Posix.Signal.SIG_BLOCK = _const : C_Int.t
Posix.Signal.SIG_SETMASK = _const : C_Int.t
Posix.Signal.SIG_UNBLOCK = _const : C_Int.t
Posix.Signal.default = _import PRIVATE : C_Signal.t -> C_Int.t C_Errno.t
Posix.Signal.handleGC = _import PRIVATE : unit -> unit
Posix.Signal.handlee = _import PRIVATE : C_Signal.t -> C_Int.t C_Errno.t
Posix.Signal.ignore = _import PRIVATE : C_Signal.t -> C_Int.t C_Errno.t
Posix.Signal.isDefault = _import PRIVATE : C_Signal.t * C_Int.t ref -> C_Int.t C_Errno.t
Posix.Signal.isIgnore = _import PRIVATE : C_Signal.t * C_Int.t ref -> C_Int.t C_Errno.t
Posix.Signal.isPending = _import PRIVATE : C_Signal.t -> C_Int.t
Posix.Signal.isPendingGC = _import PRIVATE : unit -> C_Int.t
Posix.Signal.resetPending = _import PRIVATE :unit -> unit
Posix.Signal.sigaddset = _import PRIVATE : C_Signal.t -> C_Int.t C_Errno.t
Posix.Signal.sigdelset = _import PRIVATE : C_Signal.t -> C_Int.t C_Errno.t
Posix.Signal.sigemptyset = _import PRIVATE : unit -> C_Int.t C_Errno.t
Posix.Signal.sigfillset = _import PRIVATE : unit -> C_Int.t C_Errno.t
Posix.Signal.sigismember = _import PRIVATE : C_Signal.t -> C_Int.t C_Errno.t
Posix.Signal.sigprocmask = _import PRIVATE : C_Int.t -> C_Int.t C_Errno.t
Posix.Signal.sigsuspend = _import PRIVATE : unit -> unit
Posix.SysDB.Group.getGId = _import PRIVATE : unit -> C_GId.t
Posix.SysDB.Group.getMem = _import PRIVATE : unit -> C_StringArray.t
Posix.SysDB.Group.getName = _import PRIVATE : unit -> C_String.t
Posix.SysDB.Passwd.getDir = _import PRIVATE : unit -> C_String.t
Posix.SysDB.Passwd.getGId = _import PRIVATE : unit -> C_GId.t
Posix.SysDB.Passwd.getName = _import PRIVATE : unit -> C_String.t
Posix.SysDB.Passwd.getShell = _import PRIVATE : unit -> C_String.t
Posix.SysDB.Passwd.getUId = _import PRIVATE : unit -> C_UId.t
Posix.SysDB.getgrgid = _import PRIVATE : C_GId.t -> C_Int.t C_Errno.t
Posix.SysDB.getgrnam = _import PRIVATE : NullString8.t -> C_Int.t C_Errno.t
Posix.SysDB.getpwnam = _import PRIVATE : NullString8.t -> C_Int.t C_Errno.t
Posix.SysDB.getpwuid = _import PRIVATE : C_GId.t -> C_Int.t C_Errno.t
Posix.TTY.B0 = _const : C_Speed.t
Posix.TTY.B110 = _const : C_Speed.t
Posix.TTY.B1200 = _const : C_Speed.t
Posix.TTY.B134 = _const : C_Speed.t
Posix.TTY.B150 = _const : C_Speed.t
Posix.TTY.B1800 = _const : C_Speed.t
Posix.TTY.B19200 = _const : C_Speed.t
Posix.TTY.B200 = _const : C_Speed.t
Posix.TTY.B2400 = _const : C_Speed.t
Posix.TTY.B300 = _const : C_Speed.t
Posix.TTY.B38400 = _const : C_Speed.t
Posix.TTY.B4800 = _const : C_Speed.t
Posix.TTY.B50 = _const : C_Speed.t
Posix.TTY.B600 = _const : C_Speed.t
Posix.TTY.B75 = _const : C_Speed.t
Posix.TTY.B9600 = _const : C_Speed.t
Posix.TTY.C.CLOCAL = _const : C_TCFlag.t
Posix.TTY.C.CREAD = _const : C_TCFlag.t
Posix.TTY.C.CS5 = _const : C_TCFlag.t
Posix.TTY.C.CS6 = _const : C_TCFlag.t
Posix.TTY.C.CS7 = _const : C_TCFlag.t
Posix.TTY.C.CS8 = _const : C_TCFlag.t
Posix.TTY.C.CSIZE = _const : C_TCFlag.t
Posix.TTY.C.CSTOPB = _const : C_TCFlag.t
Posix.TTY.C.HUPCL = _const : C_TCFlag.t
Posix.TTY.C.PARENB = _const : C_TCFlag.t
Posix.TTY.C.PARODD = _const : C_TCFlag.t
Posix.TTY.I.BRKINT = _const : C_TCFlag.t
Posix.TTY.I.ICRNL = _const : C_TCFlag.t
Posix.TTY.I.IGNBRK = _const : C_TCFlag.t
Posix.TTY.I.IGNCR = _const : C_TCFlag.t
Posix.TTY.I.IGNPAR = _const : C_TCFlag.t
Posix.TTY.I.INLCR = _const : C_TCFlag.t
Posix.TTY.I.INPCK = _const : C_TCFlag.t
Posix.TTY.I.ISTRIP = _const : C_TCFlag.t
Posix.TTY.I.IXANY = _const : C_TCFlag.t
Posix.TTY.I.IXOFF = _const : C_TCFlag.t
Posix.TTY.I.IXON = _const : C_TCFlag.t
Posix.TTY.I.PARMRK = _const : C_TCFlag.t
Posix.TTY.L.ECHO = _const : C_TCFlag.t
Posix.TTY.L.ECHOE = _const : C_TCFlag.t
Posix.TTY.L.ECHOK = _const : C_TCFlag.t
Posix.TTY.L.ECHONL = _const : C_TCFlag.t
Posix.TTY.L.ICANON = _const : C_TCFlag.t
Posix.TTY.L.IEXTEN = _const : C_TCFlag.t
Posix.TTY.L.ISIG = _const : C_TCFlag.t
Posix.TTY.L.NOFLSH = _const : C_TCFlag.t
Posix.TTY.L.TOSTOP = _const : C_TCFlag.t
Posix.TTY.O.BS0 = _const : C_TCFlag.t
Posix.TTY.O.BS1 = _const : C_TCFlag.t
Posix.TTY.O.BSDLY = _const : C_TCFlag.t
Posix.TTY.O.CR0 = _const : C_TCFlag.t
Posix.TTY.O.CR1 = _const : C_TCFlag.t
Posix.TTY.O.CR2 = _const : C_TCFlag.t
Posix.TTY.O.CR3 = _const : C_TCFlag.t
Posix.TTY.O.CRDLY = _const : C_TCFlag.t
Posix.TTY.O.FF0 = _const : C_TCFlag.t
Posix.TTY.O.FF1 = _const : C_TCFlag.t
Posix.TTY.O.FFDLY = _const : C_TCFlag.t
Posix.TTY.O.NL0 = _const : C_TCFlag.t
Posix.TTY.O.NL1 = _const : C_TCFlag.t
Posix.TTY.O.NLDLY = _const : C_TCFlag.t
Posix.TTY.O.OCRNL = _const : C_TCFlag.t
Posix.TTY.O.OFILL = _const : C_TCFlag.t
Posix.TTY.O.ONLCR = _const : C_TCFlag.t
Posix.TTY.O.ONLRET = _const : C_TCFlag.t
Posix.TTY.O.ONOCR = _const : C_TCFlag.t
Posix.TTY.O.OPOST = _const : C_TCFlag.t
Posix.TTY.O.TAB0 = _const : C_TCFlag.t
Posix.TTY.O.TAB1 = _const : C_TCFlag.t
Posix.TTY.O.TAB2 = _const : C_TCFlag.t
Posix.TTY.O.TAB3 = _const : C_TCFlag.t
Posix.TTY.O.TABDLY = _const : C_TCFlag.t
Posix.TTY.O.VT0 = _const : C_TCFlag.t
Posix.TTY.O.VT1 = _const : C_TCFlag.t
Posix.TTY.O.VTDLY = _const : C_TCFlag.t
Posix.TTY.TC.TCIFLUSH = _const : C_Int.t
Posix.TTY.TC.TCIOFF = _const : C_Int.t
Posix.TTY.TC.TCIOFLUSH = _const : C_Int.t
Posix.TTY.TC.TCION = _const : C_Int.t
Posix.TTY.TC.TCOFLUSH = _const : C_Int.t
Posix.TTY.TC.TCOOFF = _const : C_Int.t
Posix.TTY.TC.TCOON = _const : C_Int.t
Posix.TTY.TC.TCSADRAIN = _const : C_Int.t
Posix.TTY.TC.TCSAFLUSH = _const : C_Int.t
Posix.TTY.TC.TCSANOW = _const : C_Int.t
Posix.TTY.TC.drain = _import PRIVATE : C_Fd.t -> C_Int.t C_Errno.t
Posix.TTY.TC.flow = _import PRIVATE : C_Fd.t * C_Int.t -> C_Int.t C_Errno.t
Posix.TTY.TC.flush = _import PRIVATE : C_Fd.t * C_Int.t -> C_Int.t C_Errno.t
Posix.TTY.TC.getattr = _import PRIVATE : C_Fd.t -> C_Int.t C_Errno.t
Posix.TTY.TC.getpgrp = _import PRIVATE : C_Fd.t -> C_PId.t C_Errno.t
Posix.TTY.TC.sendbreak = _import PRIVATE : C_Fd.t * C_Int.t -> C_Int.t C_Errno.t
Posix.TTY.TC.setattr = _import PRIVATE : C_Fd.t * C_Int.t -> C_Int.t C_Errno.t
Posix.TTY.TC.setpgrp = _import PRIVATE : C_Fd.t * C_PId.t -> C_Int.t C_Errno.t
Posix.TTY.Termios.cfGetISpeed = _import PRIVATE : unit -> C_Speed.t
Posix.TTY.Termios.cfGetOSpeed = _import PRIVATE : unit -> C_Speed.t
Posix.TTY.Termios.cfSetISpeed = _import PRIVATE : C_Speed.t -> C_Int.t C_Errno.t
Posix.TTY.Termios.cfSetOSpeed = _import PRIVATE : C_Speed.t -> C_Int.t C_Errno.t
Posix.TTY.Termios.getCC = _import PRIVATE : C_CC.t array -> unit
Posix.TTY.Termios.getCFlag = _import PRIVATE : unit -> C_TCFlag.t
Posix.TTY.Termios.getIFlag = _import PRIVATE : unit -> C_TCFlag.t
Posix.TTY.Termios.getLFlag = _import PRIVATE : unit -> C_TCFlag.t
Posix.TTY.Termios.getOFlag = _import PRIVATE : unit -> C_TCFlag.t
Posix.TTY.Termios.setCC = _import PRIVATE : C_CC.t array -> unit
Posix.TTY.Termios.setCFlag = _import PRIVATE : C_TCFlag.t -> unit
Posix.TTY.Termios.setIFlag = _import PRIVATE : C_TCFlag.t -> unit
Posix.TTY.Termios.setLFlag = _import PRIVATE : C_TCFlag.t -> unit
Posix.TTY.Termios.setOFlag = _import PRIVATE : C_TCFlag.t -> unit
Posix.TTY.V.NCCS = _const : C_Int.t
Posix.TTY.V.VEOF = _const : C_Int.t
Posix.TTY.V.VEOL = _const : C_Int.t
Posix.TTY.V.VERASE = _const : C_Int.t
Posix.TTY.V.VINTR = _const : C_Int.t
Posix.TTY.V.VKILL = _const : C_Int.t
Posix.TTY.V.VMIN = _const : C_Int.t
Posix.TTY.V.VQUIT = _const : C_Int.t
Posix.TTY.V.VSTART = _const : C_Int.t
Posix.TTY.V.VSTOP = _const : C_Int.t
Posix.TTY.V.VSUSP = _const : C_Int.t
Posix.TTY.V.VTIME = _const : C_Int.t
Socket.AF.INET = _const : C_Int.t
Socket.AF.INET6 = _const : C_Int.t
Socket.AF.UNIX = _const : C_Int.t
Socket.AF.UNSPEC = _const : C_Int.t
Socket.Ctl.SOL_SOCKET = _const : C_Int.t
Socket.Ctl.SO_ACCEPTCONN = _const : C_Int.t
Socket.Ctl.SO_BROADCAST = _const : C_Int.t
Socket.Ctl.SO_DEBUG = _const : C_Int.t
Socket.Ctl.SO_DONTROUTE = _const : C_Int.t
Socket.Ctl.SO_ERROR = _const : C_Int.t
Socket.Ctl.SO_KEEPALIVE = _const : C_Int.t
Socket.Ctl.SO_LINGER = _const : C_Int.t
Socket.Ctl.SO_OOBINLINE = _const : C_Int.t
Socket.Ctl.SO_RCVBUF = _const : C_Int.t
Socket.Ctl.SO_RCVLOWAT = _const : C_Int.t
Socket.Ctl.SO_RCVTIMEO = _const : C_Int.t
Socket.Ctl.SO_REUSEADDR = _const : C_Int.t
Socket.Ctl.SO_SNDBUF = _const : C_Int.t
Socket.Ctl.SO_SNDLOWAT = _const : C_Int.t
Socket.Ctl.SO_SNDTIMEO = _const : C_Int.t
Socket.Ctl.SO_TYPE = _const : C_Int.t
Socket.Ctl.getATMARK = _import PRIVATE : C_Sock.t * C_Int.t ref -> C_Int.t C_Errno.t
Socket.Ctl.getNREAD = _import PRIVATE : C_Sock.t * C_Int.t ref -> C_Int.t C_Errno.t
Socket.Ctl.getPeerName = _import PRIVATE : C_Sock.t * Word8.t array * C_Socklen.t ref -> C_Int.t C_Errno.t
Socket.Ctl.getSockName = _import PRIVATE : C_Sock.t * Word8.t array * C_Socklen.t ref -> C_Int.t C_Errno.t
Socket.Ctl.getSockOptC_Int = _import PRIVATE : C_Sock.t * C_Int.t * C_Int.t * C_Int.t ref -> C_Int.t C_Errno.t
Socket.Ctl.getSockOptC_Linger = _import PRIVATE : C_Sock.t * C_Int.t * C_Int.t * C_Int.t ref * C_Int.t ref -> C_Int.t C_Errno.t
Socket.Ctl.setSockOptC_Int = _import PRIVATE : C_Sock.t * C_Int.t * C_Int.t * C_Int.t -> C_Int.t C_Errno.t
Socket.Ctl.setSockOptC_Linger = _import PRIVATE : C_Sock.t * C_Int.t * C_Int.t * C_Int.t * C_Int.t -> C_Int.t C_Errno.t
Socket.GenericSock.socket = _import PRIVATE : C_Int.t * C_Int.t * C_Int.t -> C_Int.t C_Errno.t
Socket.GenericSock.socketPair = _import PRIVATE : C_Int.t * C_Int.t * C_Int.t * C_Int.t array -> C_Int.t C_Errno.t
Socket.INetSock.Ctl.IPPROTO_TCP = _const : C_Int.t
Socket.INetSock.Ctl.TCP_NODELAY = _const : C_Int.t
Socket.INetSock.fromAddr = _import PRIVATE : Word8.t vector -> unit
Socket.INetSock.getInAddr = _import PRIVATE : Word8.t array -> unit
Socket.INetSock.getPort = _import PRIVATE : unit -> Word16.t
Socket.INetSock.toAddr = _import PRIVATE : Word8.t vector * Word16.t * Word8.t array * C_Socklen.t ref -> unit
Socket.MSG_CTRUNC = _const : C_Int.t
Socket.MSG_DONTROUTE = _const : C_Int.t
Socket.MSG_DONTWAIT = _const : C_Int.t
Socket.MSG_EOR = _const : C_Int.t
Socket.MSG_OOB = _const : C_Int.t
Socket.MSG_PEEK = _const : C_Int.t
Socket.MSG_TRUNC = _const : C_Int.t
Socket.MSG_WAITALL = _const : C_Int.t
Socket.SHUT_RD = _const : C_Int.t
Socket.SHUT_RDWR = _const : C_Int.t
Socket.SHUT_WR = _const : C_Int.t
Socket.SOCK.DGRAM = _const : C_Int.t
Socket.SOCK.RAW = _const : C_Int.t
Socket.SOCK.SEQPACKET = _const : C_Int.t
Socket.SOCK.STREAM = _const : C_Int.t
Socket.UnixSock.fromAddr = _import PRIVATE : Word8.t vector * Char8.t array * C_Size.t -> unit
Socket.UnixSock.pathLen = _import PRIVATE : Word8.t vector -> C_Size.t
Socket.UnixSock.toAddr = _import PRIVATE : NullString8.t * C_Size.t * Word8.t array * C_Socklen.t ref -> unit
Socket.accept = _import PRIVATE : C_Sock.t * Word8.t array * C_Socklen.t ref -> C_Int.t C_Errno.t
Socket.bind = _import PRIVATE : C_Sock.t * Word8.t vector * C_Socklen.t -> C_Int.t C_Errno.t
Socket.close = _import PRIVATE : C_Sock.t -> C_Int.t C_Errno.t
Socket.connect = _import PRIVATE : C_Sock.t * Word8.t vector * C_Socklen.t -> C_Int.t C_Errno.t
Socket.familyOfAddr = _import PRIVATE : Word8.t vector -> C_Int.t
Socket.getTimeout_sec = _import PRIVATE : unit -> C_Time.t
Socket.getTimeout_usec = _import PRIVATE : unit -> C_SUSeconds.t
Socket.listen = _import PRIVATE : C_Sock.t * C_Int.t -> C_Int.t C_Errno.t
Socket.recv = _import PRIVATE : C_Sock.t * Word8.t array * C_Int.t * C_Size.t * C_Int.t -> C_SSize.t C_Errno.t
Socket.recvFrom = _import PRIVATE : C_Sock.t * Word8.t array * C_Int.t * C_Size.t * C_Int.t * Word8.t array * C_Socklen.t ref -> C_SSize.t C_Errno.t
Socket.select = _import PRIVATE : C_Fd.t vector * C_Fd.t vector * C_Fd.t vector * C_Int.t array * C_Int.t array * C_Int.t array -> C_Int.t C_Errno.t
Socket.sendArr = _import PRIVATE : C_Sock.t * Word8.t array * C_Int.t * C_Size.t * C_Int.t -> C_SSize.t C_Errno.t
Socket.sendArrTo = _import PRIVATE : C_Sock.t * Word8.t array * C_Int.t * C_Size.t * C_Int.t * Word8.t vector * C_Socklen.t -> C_SSize.t C_Errno.t
Socket.sendVec = _import PRIVATE : C_Sock.t * Word8.t vector * C_Int.t * C_Size.t * C_Int.t -> C_SSize.t C_Errno.t
Socket.sendVecTo = _import PRIVATE : C_Sock.t * Word8.t vector * C_Int.t * C_Size.t * C_Int.t * Word8.t vector * C_Socklen.t -> C_SSize.t C_Errno.t
Socket.setTimeout = _import PRIVATE : C_Time.t * C_SUSeconds.t -> unit
Socket.setTimeoutNull = _import PRIVATE : unit -> unit
Socket.shutdown = _import PRIVATE : C_Sock.t * C_Int.t -> C_Int.t C_Errno.t
Socket.sockAddrStorageLen = _const : C_Size.t
Stdio.print = _import PRIVATE : String8.t -> unit
Stdio.printStderr = _import PRIVATE : String8.t -> unit
Stdio.printStdout = _import PRIVATE : String8.t -> unit
Time.getTimeOfDay = _import PRIVATE : C_Time.t ref * C_SUSeconds.t ref -> C_Int.t
Windows.Process.create = _import PRIVATE : NullString8.t * NullString8.t * NullString8.t * C_Fd.t * C_Fd.t * C_Fd.t -> C_PId.t C_Errno.t
Windows.Process.createNull = _import PRIVATE : NullString8.t * NullString8.t * C_Fd.t * C_Fd.t * C_Fd.t -> C_PId.t C_Errno.t
Windows.Process.getexitcode = _import PRIVATE : C_PId.t * C_Status.t ref -> C_Int.t C_Errno.t
Windows.Process.terminate = _import PRIVATE : C_PId.t * C_Signal.t -> C_Int.t C_Errno.t
##
Real32.Math.acos = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.Math.asin = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.Math.atan = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.Math.atan2 = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t * Real32.t -> Real32.t
Real32.Math.cos = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.Math.cosh = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.Math.e = _symbol : Real32.t
Real32.Math.exp = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.Math.ln = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.Math.log10 = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.Math.pi = _symbol : Real32.t
Real32.Math.pow = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t * Real32.t -> Real32.t
Real32.Math.sin = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.Math.sinh = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.Math.sqrt = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.Math.tan = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.Math.tanh = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.abs = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.add = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t * Real32.t -> Real32.t
Real32.castToWord32 = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Word32.t
Real32.div = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t * Real32.t -> Real32.t
Real32.equal = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t * Real32.t -> Bool.t
Real32.fetch = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t ref -> Real32.t
Real32.frexp = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t * C_Int.t ref -> Real32.t
Real32.gdtoa = _import PRIVATE : Real32.t * C_Int.t * C_Int.t * C_Int.t * C_Int.t ref -> C_String.t
Real32.ldexp = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t * C_Int.t -> Real32.t
Real32.le = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t * Real32.t -> Bool.t
Real32.lt = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t * Real32.t -> Bool.t
Real32.modf = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t * Real32.t ref -> Real32.t
Real32.move = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t ref * Real32.t ref -> unit
Real32.mul = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t * Real32.t -> Real32.t
Real32.muladd = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t * Real32.t * Real32.t -> Real32.t
Real32.mulsub = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t * Real32.t * Real32.t -> Real32.t
Real32.neg = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.realCeil = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.realFloor = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.realTrunc = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.rndToReal32 = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.rndToReal64 = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real64.t
Real32.rndToWordS16 = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Int16.t
Real32.rndToWordS32 = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Int32.t
Real32.rndToWordS64 = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Int64.t
Real32.rndToWordS8 = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Int8.t
Real32.rndToWordU16 = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Word16.t
Real32.rndToWordU32 = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Word32.t
Real32.rndToWordU64 = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Word64.t
Real32.rndToWordU8 = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Word8.t
Real32.round = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t -> Real32.t
Real32.store = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t ref * Real32.t -> unit
Real32.strtor = _import PRIVATE : NullString8.t * C_Int.t -> Real32.t
Real32.sub = _import MLTON_CODEGEN_STATIC_INLINE : Real32.t * Real32.t -> Real32.t
Real64.Math.acos = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.Math.asin = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.Math.atan = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.Math.atan2 = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t * Real64.t -> Real64.t
Real64.Math.cos = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.Math.cosh = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.Math.e = _symbol : Real64.t
Real64.Math.exp = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.Math.ln = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.Math.log10 = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.Math.pi = _symbol : Real64.t
Real64.Math.pow = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t * Real64.t -> Real64.t
Real64.Math.sin = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.Math.sinh = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.Math.sqrt = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.Math.tan = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.Math.tanh = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.abs = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.add = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t * Real64.t -> Real64.t
Real64.castToWord64 = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Word64.t
Real64.div = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t * Real64.t -> Real64.t
Real64.equal = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t * Real64.t -> Bool.t
Real64.fetch = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t ref -> Real64.t
Real64.frexp = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t * C_Int.t ref -> Real64.t
Real64.gdtoa = _import PRIVATE : Real64.t * C_Int.t * C_Int.t * C_Int.t * C_Int.t ref -> C_String.t
Real64.ldexp = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t * C_Int.t -> Real64.t
Real64.le = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t * Real64.t -> Bool.t
Real64.lt = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t * Real64.t -> Bool.t
Real64.modf = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t * Real64.t ref -> Real64.t
Real64.move = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t ref * Real64.t ref -> unit
Real64.mul = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t * Real64.t -> Real64.t
Real64.muladd = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t * Real64.t * Real64.t -> Real64.t
Real64.mulsub = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t * Real64.t * Real64.t -> Real64.t
Real64.neg = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.realCeil = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.realFloor = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.realTrunc = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.rndToReal32 = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real32.t
Real64.rndToReal64 = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.rndToWordS16 = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Int16.t
Real64.rndToWordS32 = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Int32.t
Real64.rndToWordS64 = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Int64.t
Real64.rndToWordS8 = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Int8.t
Real64.rndToWordU16 = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Word16.t
Real64.rndToWordU32 = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Word32.t
Real64.rndToWordU64 = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Word64.t
Real64.rndToWordU8 = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Word8.t
Real64.round = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t -> Real64.t
Real64.store = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t ref * Real64.t -> unit
Real64.strtor = _import PRIVATE : NullString8.t * C_Int.t -> Real64.t
Real64.sub = _import MLTON_CODEGEN_STATIC_INLINE : Real64.t * Real64.t -> Real64.t
Word16.add = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word16.t -> Word16.t
Word16.andb = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word16.t -> Word16.t
Word16.equal = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word16.t -> Bool.t
Word16.lshift = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word32.t -> Word16.t
Word16.neg = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t -> Word16.t
Word16.notb = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t -> Word16.t
Word16.orb = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word16.t -> Word16.t
Word16.rol = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word32.t -> Word16.t
Word16.ror = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word32.t -> Word16.t
Word16.sub = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word16.t -> Word16.t
Word16.xorb = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word16.t -> Word16.t
Word32.add = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Word32.t
Word32.andb = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Word32.t
Word32.castToReal32 = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t -> Real32.t
Word32.equal = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Bool.t
Word32.lshift = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Word32.t
Word32.neg = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t -> Word32.t
Word32.notb = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t -> Word32.t
Word32.orb = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Word32.t
Word32.rol = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Word32.t
Word32.ror = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Word32.t
Word32.sub = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Word32.t
Word32.xorb = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Word32.t
Word64.add = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word64.t -> Word64.t
Word64.andb = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word64.t -> Word64.t
Word64.castToReal64 = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t -> Real64.t
Word64.equal = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word64.t -> Bool.t
Word64.fetch = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t ref -> Word64.t
Word64.lshift = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word32.t -> Word64.t
Word64.move = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t ref * Word64.t ref -> unit
Word64.neg = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t -> Word64.t
Word64.notb = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t -> Word64.t
Word64.orb = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word64.t -> Word64.t
Word64.rol = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word32.t -> Word64.t
Word64.ror = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word32.t -> Word64.t
Word64.store = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t ref * Word64.t -> unit
Word64.sub = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word64.t -> Word64.t
Word64.xorb = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word64.t -> Word64.t
Word8.add = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word8.t -> Word8.t
Word8.andb = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word8.t -> Word8.t
Word8.equal = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word8.t -> Bool.t
Word8.lshift = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word32.t -> Word8.t
Word8.neg = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t -> Word8.t
Word8.notb = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t -> Word8.t
Word8.orb = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word8.t -> Word8.t
Word8.rol = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word32.t -> Word8.t
Word8.ror = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word32.t -> Word8.t
Word8.sub = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word8.t -> Word8.t
Word8.xorb = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word8.t -> Word8.t
WordS16.addCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int16.t * Int16.t -> Bool.t
WordS16.extdToWord16 = _import MLTON_CODEGEN_STATIC_INLINE : Int16.t -> Word16.t
WordS16.extdToWord32 = _import MLTON_CODEGEN_STATIC_INLINE : Int16.t -> Word32.t
WordS16.extdToWord64 = _import MLTON_CODEGEN_STATIC_INLINE : Int16.t -> Word64.t
WordS16.extdToWord8 = _import MLTON_CODEGEN_STATIC_INLINE : Int16.t -> Word8.t
WordS16.ge = _import MLTON_CODEGEN_STATIC_INLINE : Int16.t * Int16.t -> Bool.t
WordS16.gt = _import MLTON_CODEGEN_STATIC_INLINE : Int16.t * Int16.t -> Bool.t
WordS16.le = _import MLTON_CODEGEN_STATIC_INLINE : Int16.t * Int16.t -> Bool.t
WordS16.lt = _import MLTON_CODEGEN_STATIC_INLINE : Int16.t * Int16.t -> Bool.t
WordS16.mul = _import MLTON_CODEGEN_STATIC_INLINE : Int16.t * Int16.t -> Int16.t
WordS16.mulCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int16.t * Int16.t -> Bool.t
WordS16.negCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int16.t -> Bool.t
WordS16.quot = _import MLTON_CODEGEN_WORDSQUOTREM(MLTON_CODEGEN_STATIC_INLINE) : Int16.t * Int16.t -> Int16.t
WordS16.rem = _import MLTON_CODEGEN_WORDSQUOTREM(MLTON_CODEGEN_STATIC_INLINE) : Int16.t * Int16.t -> Int16.t
WordS16.rndToReal32 = _import PRIVATE : Int16.t -> Real32.t
WordS16.rndToReal64 = _import PRIVATE : Int16.t -> Real64.t
WordS16.rshift = _import MLTON_CODEGEN_STATIC_INLINE : Int16.t * Word32.t -> Int16.t
WordS16.subCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int16.t * Int16.t -> Bool.t
WordS32.addCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int32.t * Int32.t -> Bool.t
WordS32.extdToWord16 = _import MLTON_CODEGEN_STATIC_INLINE : Int32.t -> Word16.t
WordS32.extdToWord32 = _import MLTON_CODEGEN_STATIC_INLINE : Int32.t -> Word32.t
WordS32.extdToWord64 = _import MLTON_CODEGEN_STATIC_INLINE : Int32.t -> Word64.t
WordS32.extdToWord8 = _import MLTON_CODEGEN_STATIC_INLINE : Int32.t -> Word8.t
WordS32.ge = _import MLTON_CODEGEN_STATIC_INLINE : Int32.t * Int32.t -> Bool.t
WordS32.gt = _import MLTON_CODEGEN_STATIC_INLINE : Int32.t * Int32.t -> Bool.t
WordS32.le = _import MLTON_CODEGEN_STATIC_INLINE : Int32.t * Int32.t -> Bool.t
WordS32.lt = _import MLTON_CODEGEN_STATIC_INLINE : Int32.t * Int32.t -> Bool.t
WordS32.mul = _import MLTON_CODEGEN_STATIC_INLINE : Int32.t * Int32.t -> Int32.t
WordS32.mulCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int32.t * Int32.t -> Bool.t
WordS32.negCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int32.t -> Bool.t
WordS32.quot = _import MLTON_CODEGEN_WORDSQUOTREM(MLTON_CODEGEN_STATIC_INLINE) : Int32.t * Int32.t -> Int32.t
WordS32.rem = _import MLTON_CODEGEN_WORDSQUOTREM(MLTON_CODEGEN_STATIC_INLINE) : Int32.t * Int32.t -> Int32.t
WordS32.rndToReal32 = _import PRIVATE : Int32.t -> Real32.t
WordS32.rndToReal64 = _import PRIVATE : Int32.t -> Real64.t
WordS32.rshift = _import MLTON_CODEGEN_STATIC_INLINE : Int32.t * Word32.t -> Int32.t
WordS32.subCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int32.t * Int32.t -> Bool.t
WordS64.addCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int64.t * Int64.t -> Bool.t
WordS64.extdToWord16 = _import MLTON_CODEGEN_STATIC_INLINE : Int64.t -> Word16.t
WordS64.extdToWord32 = _import MLTON_CODEGEN_STATIC_INLINE : Int64.t -> Word32.t
WordS64.extdToWord64 = _import MLTON_CODEGEN_STATIC_INLINE : Int64.t -> Word64.t
WordS64.extdToWord8 = _import MLTON_CODEGEN_STATIC_INLINE : Int64.t -> Word8.t
WordS64.ge = _import MLTON_CODEGEN_STATIC_INLINE : Int64.t * Int64.t -> Bool.t
WordS64.gt = _import MLTON_CODEGEN_STATIC_INLINE : Int64.t * Int64.t -> Bool.t
WordS64.le = _import MLTON_CODEGEN_STATIC_INLINE : Int64.t * Int64.t -> Bool.t
WordS64.lt = _import MLTON_CODEGEN_STATIC_INLINE : Int64.t * Int64.t -> Bool.t
WordS64.mul = _import MLTON_CODEGEN_STATIC_INLINE : Int64.t * Int64.t -> Int64.t
WordS64.mulCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int64.t * Int64.t -> Bool.t
WordS64.negCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int64.t -> Bool.t
WordS64.quot = _import MLTON_CODEGEN_WORDSQUOTREM(MLTON_CODEGEN_STATIC_INLINE) : Int64.t * Int64.t -> Int64.t
WordS64.rem = _import MLTON_CODEGEN_WORDSQUOTREM(MLTON_CODEGEN_STATIC_INLINE) : Int64.t * Int64.t -> Int64.t
WordS64.rndToReal32 = _import PRIVATE : Int64.t -> Real32.t
WordS64.rndToReal64 = _import PRIVATE : Int64.t -> Real64.t
WordS64.rshift = _import MLTON_CODEGEN_STATIC_INLINE : Int64.t * Word32.t -> Int64.t
WordS64.subCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int64.t * Int64.t -> Bool.t
WordS8.addCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int8.t * Int8.t -> Bool.t
WordS8.extdToWord16 = _import MLTON_CODEGEN_STATIC_INLINE : Int8.t -> Word16.t
WordS8.extdToWord32 = _import MLTON_CODEGEN_STATIC_INLINE : Int8.t -> Word32.t
WordS8.extdToWord64 = _import MLTON_CODEGEN_STATIC_INLINE : Int8.t -> Word64.t
WordS8.extdToWord8 = _import MLTON_CODEGEN_STATIC_INLINE : Int8.t -> Word8.t
WordS8.ge = _import MLTON_CODEGEN_STATIC_INLINE : Int8.t * Int8.t -> Bool.t
WordS8.gt = _import MLTON_CODEGEN_STATIC_INLINE : Int8.t * Int8.t -> Bool.t
WordS8.le = _import MLTON_CODEGEN_STATIC_INLINE : Int8.t * Int8.t -> Bool.t
WordS8.lt = _import MLTON_CODEGEN_STATIC_INLINE : Int8.t * Int8.t -> Bool.t
WordS8.mul = _import MLTON_CODEGEN_STATIC_INLINE : Int8.t * Int8.t -> Int8.t
WordS8.mulCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int8.t * Int8.t -> Bool.t
WordS8.negCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int8.t -> Bool.t
WordS8.quot = _import MLTON_CODEGEN_WORDSQUOTREM(MLTON_CODEGEN_STATIC_INLINE) : Int8.t * Int8.t -> Int8.t
WordS8.rem = _import MLTON_CODEGEN_WORDSQUOTREM(MLTON_CODEGEN_STATIC_INLINE) : Int8.t * Int8.t -> Int8.t
WordS8.rndToReal32 = _import PRIVATE : Int8.t -> Real32.t
WordS8.rndToReal64 = _import PRIVATE : Int8.t -> Real64.t
WordS8.rshift = _import MLTON_CODEGEN_STATIC_INLINE : Int8.t * Word32.t -> Int8.t
WordS8.subCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Int8.t * Int8.t -> Bool.t
WordU16.addCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word16.t -> Bool.t
WordU16.extdToWord16 = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t -> Word16.t
WordU16.extdToWord32 = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t -> Word32.t
WordU16.extdToWord64 = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t -> Word64.t
WordU16.extdToWord8 = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t -> Word8.t
WordU16.ge = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word16.t -> Bool.t
WordU16.gt = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word16.t -> Bool.t
WordU16.le = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word16.t -> Bool.t
WordU16.lt = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word16.t -> Bool.t
WordU16.mul = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word16.t -> Word16.t
WordU16.mulCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word16.t -> Bool.t
WordU16.quot = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word16.t -> Word16.t
WordU16.rem = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word16.t -> Word16.t
WordU16.rndToReal32 = _import PRIVATE : Word16.t -> Real32.t
WordU16.rndToReal64 = _import PRIVATE : Word16.t -> Real64.t
WordU16.rshift = _import MLTON_CODEGEN_STATIC_INLINE : Word16.t * Word32.t -> Word16.t
WordU32.addCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Bool.t
WordU32.extdToWord16 = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t -> Word16.t
WordU32.extdToWord32 = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t -> Word32.t
WordU32.extdToWord64 = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t -> Word64.t
WordU32.extdToWord8 = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t -> Word8.t
WordU32.ge = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Bool.t
WordU32.gt = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Bool.t
WordU32.le = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Bool.t
WordU32.lt = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Bool.t
WordU32.mul = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Word32.t
WordU32.mulCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Bool.t
WordU32.quot = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Word32.t
WordU32.rem = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Word32.t
WordU32.rndToReal32 = _import PRIVATE : Word32.t -> Real32.t
WordU32.rndToReal64 = _import PRIVATE : Word32.t -> Real64.t
WordU32.rshift = _import MLTON_CODEGEN_STATIC_INLINE : Word32.t * Word32.t -> Word32.t
WordU64.addCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word64.t -> Bool.t
WordU64.extdToWord16 = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t -> Word16.t
WordU64.extdToWord32 = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t -> Word32.t
WordU64.extdToWord64 = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t -> Word64.t
WordU64.extdToWord8 = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t -> Word8.t
WordU64.ge = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word64.t -> Bool.t
WordU64.gt = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word64.t -> Bool.t
WordU64.le = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word64.t -> Bool.t
WordU64.lt = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word64.t -> Bool.t
WordU64.mul = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word64.t -> Word64.t
WordU64.mulCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word64.t -> Bool.t
WordU64.quot = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word64.t -> Word64.t
WordU64.rem = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word64.t -> Word64.t
WordU64.rndToReal32 = _import PRIVATE : Word64.t -> Real32.t
WordU64.rndToReal64 = _import PRIVATE : Word64.t -> Real64.t
WordU64.rshift = _import MLTON_CODEGEN_STATIC_INLINE : Word64.t * Word32.t -> Word64.t
WordU8.addCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word8.t -> Bool.t
WordU8.extdToWord16 = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t -> Word16.t
WordU8.extdToWord32 = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t -> Word32.t
WordU8.extdToWord64 = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t -> Word64.t
WordU8.extdToWord8 = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t -> Word8.t
WordU8.ge = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word8.t -> Bool.t
WordU8.gt = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word8.t -> Bool.t
WordU8.le = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word8.t -> Bool.t
WordU8.lt = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word8.t -> Bool.t
WordU8.mul = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word8.t -> Word8.t
WordU8.mulCheckOverflows = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word8.t -> Bool.t
WordU8.quot = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word8.t -> Word8.t
WordU8.rem = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word8.t -> Word8.t
WordU8.rndToReal32 = _import PRIVATE : Word8.t -> Real32.t
WordU8.rndToReal64 = _import PRIVATE : Word8.t -> Real64.t
WordU8.rshift = _import MLTON_CODEGEN_STATIC_INLINE : Word8.t * Word32.t -> Word8.t
