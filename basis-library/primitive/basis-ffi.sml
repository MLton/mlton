(* This file is automatically generated.  Do not edit. *)

local open Primitive in 
structure PrimitiveFFI =
struct
structure CommandLine = 
struct
val (argcGet, argcSet) = _symbol "CommandLine_argc" private : (unit -> (C_Int.t)) * ((C_Int.t) -> unit);
val (argvGet, argvSet) = _symbol "CommandLine_argv" private : (unit -> (C_StringArray.t)) * ((C_StringArray.t) -> unit);
val (commandNameGet, commandNameSet) = _symbol "CommandLine_commandName" private : (unit -> (C_String.t)) * ((C_String.t) -> unit);
end
structure Cygwin = 
struct
val toFullWindowsPath = _import "Cygwin_toFullWindowsPath" private : NullString8.t -> C_String.t;
end
structure Date = 
struct
val gmTime = _import "Date_gmTime" private : (C_Time.t) ref -> (C_Int.t) C_Errno.t;
val localOffset = _import "Date_localOffset" private : unit -> C_Double.t;
val localTime = _import "Date_localTime" private : (C_Time.t) ref -> (C_Int.t) C_Errno.t;
val mkTime = _import "Date_mkTime" private : unit -> (C_Time.t) C_Errno.t;
val strfTime = _import "Date_strfTime" private : (Char8.t) array * C_Size.t * NullString8.t -> C_Size.t;
structure Tm = 
struct
val getHour = _import "Date_Tm_getHour" private : unit -> C_Int.t;
val getIsDst = _import "Date_Tm_getIsDst" private : unit -> C_Int.t;
val getMDay = _import "Date_Tm_getMDay" private : unit -> C_Int.t;
val getMin = _import "Date_Tm_getMin" private : unit -> C_Int.t;
val getMon = _import "Date_Tm_getMon" private : unit -> C_Int.t;
val getSec = _import "Date_Tm_getSec" private : unit -> C_Int.t;
val getWDay = _import "Date_Tm_getWDay" private : unit -> C_Int.t;
val getYDay = _import "Date_Tm_getYDay" private : unit -> C_Int.t;
val getYear = _import "Date_Tm_getYear" private : unit -> C_Int.t;
val setHour = _import "Date_Tm_setHour" private : C_Int.t -> unit;
val setIsDst = _import "Date_Tm_setIsDst" private : C_Int.t -> unit;
val setMDay = _import "Date_Tm_setMDay" private : C_Int.t -> unit;
val setMin = _import "Date_Tm_setMin" private : C_Int.t -> unit;
val setMon = _import "Date_Tm_setMon" private : C_Int.t -> unit;
val setSec = _import "Date_Tm_setSec" private : C_Int.t -> unit;
val setWDay = _import "Date_Tm_setWDay" private : C_Int.t -> unit;
val setYDay = _import "Date_Tm_setYDay" private : C_Int.t -> unit;
val setYear = _import "Date_Tm_setYear" private : C_Int.t -> unit;
end
end
structure IEEEReal = 
struct
val getRoundingMode = _import "IEEEReal_getRoundingMode" private : unit -> C_Int.t;
structure RoundingMode = 
struct
val FE_DOWNWARD = _const "IEEEReal_RoundingMode_FE_DOWNWARD" : C_Int.t;
val FE_NOSUPPORT = _const "IEEEReal_RoundingMode_FE_NOSUPPORT" : C_Int.t;
val FE_TONEAREST = _const "IEEEReal_RoundingMode_FE_TONEAREST" : C_Int.t;
val FE_TOWARDZERO = _const "IEEEReal_RoundingMode_FE_TOWARDZERO" : C_Int.t;
val FE_UPWARD = _const "IEEEReal_RoundingMode_FE_UPWARD" : C_Int.t;
end
val setRoundingMode = _import "IEEEReal_setRoundingMode" private : C_Int.t -> C_Int.t;
end
structure MinGW = 
struct
val clearNonBlock = _import "MinGW_clearNonBlock" private : C_Fd.t -> unit;
val getTempPath = _import "MinGW_getTempPath" private : C_Size.t * (Char8.t) array -> C_Size.t;
val setNonBlock = _import "MinGW_setNonBlock" private : C_Fd.t -> unit;
end
structure MLton = 
struct
val bug = _import "MLton_bug" private : String8.t -> unit;
structure Itimer = 
struct
val PROF = _const "MLton_Itimer_PROF" : C_Int.t;
val REAL = _const "MLton_Itimer_REAL" : C_Int.t;
val set = _import "MLton_Itimer_set" private : C_Int.t * C_Time.t * C_SUSeconds.t * C_Time.t * C_SUSeconds.t -> (C_Int.t) C_Errno.t;
val VIRTUAL = _const "MLton_Itimer_VIRTUAL" : C_Int.t;
end
structure Process = 
struct
val spawne = _import "MLton_Process_spawne" private : NullString8.t * (NullString8.t) array * (NullString8.t) array -> (C_PId.t) C_Errno.t;
val spawnp = _import "MLton_Process_spawnp" private : NullString8.t * (NullString8.t) array -> (C_PId.t) C_Errno.t;
end
structure Rlimit = 
struct
val AS = _const "MLton_Rlimit_AS" : C_Int.t;
val CORE = _const "MLton_Rlimit_CORE" : C_Int.t;
val CPU = _const "MLton_Rlimit_CPU" : C_Int.t;
val DATA = _const "MLton_Rlimit_DATA" : C_Int.t;
val FSIZE = _const "MLton_Rlimit_FSIZE" : C_Int.t;
val get = _import "MLton_Rlimit_get" private : C_Int.t -> (C_Int.t) C_Errno.t;
val getHard = _import "MLton_Rlimit_getHard" private : unit -> C_RLim.t;
val getSoft = _import "MLton_Rlimit_getSoft" private : unit -> C_RLim.t;
val INFINITY = _const "MLton_Rlimit_INFINITY" : C_RLim.t;
val MEMLOCK = _const "MLton_Rlimit_MEMLOCK" : C_Int.t;
val NOFILE = _const "MLton_Rlimit_NOFILE" : C_Int.t;
val NPROC = _const "MLton_Rlimit_NPROC" : C_Int.t;
val RSS = _const "MLton_Rlimit_RSS" : C_Int.t;
val set = _import "MLton_Rlimit_set" private : C_Int.t * C_RLim.t * C_RLim.t -> (C_Int.t) C_Errno.t;
val STACK = _const "MLton_Rlimit_STACK" : C_Int.t;
end
structure Rusage = 
struct
val children_stime_sec = _import "MLton_Rusage_children_stime_sec" private : unit -> C_Time.t;
val children_stime_usec = _import "MLton_Rusage_children_stime_usec" private : unit -> C_SUSeconds.t;
val children_utime_sec = _import "MLton_Rusage_children_utime_sec" private : unit -> C_Time.t;
val children_utime_usec = _import "MLton_Rusage_children_utime_usec" private : unit -> C_SUSeconds.t;
val gc_stime_sec = _import "MLton_Rusage_gc_stime_sec" private : unit -> C_Time.t;
val gc_stime_usec = _import "MLton_Rusage_gc_stime_usec" private : unit -> C_SUSeconds.t;
val gc_utime_sec = _import "MLton_Rusage_gc_utime_sec" private : unit -> C_Time.t;
val gc_utime_usec = _import "MLton_Rusage_gc_utime_usec" private : unit -> C_SUSeconds.t;
val getrusage = _import "MLton_Rusage_getrusage" private : unit -> unit;
val self_stime_sec = _import "MLton_Rusage_self_stime_sec" private : unit -> C_Time.t;
val self_stime_usec = _import "MLton_Rusage_self_stime_usec" private : unit -> C_SUSeconds.t;
val self_utime_sec = _import "MLton_Rusage_self_utime_sec" private : unit -> C_Time.t;
val self_utime_usec = _import "MLton_Rusage_self_utime_usec" private : unit -> C_SUSeconds.t;
end
structure Syslog = 
struct
val closelog = _import "MLton_Syslog_closelog" private : unit -> unit;
structure Facility = 
struct
val LOG_AUTH = _const "MLton_Syslog_Facility_LOG_AUTH" : C_Int.t;
val LOG_CRON = _const "MLton_Syslog_Facility_LOG_CRON" : C_Int.t;
val LOG_DAEMON = _const "MLton_Syslog_Facility_LOG_DAEMON" : C_Int.t;
val LOG_KERN = _const "MLton_Syslog_Facility_LOG_KERN" : C_Int.t;
val LOG_LOCAL0 = _const "MLton_Syslog_Facility_LOG_LOCAL0" : C_Int.t;
val LOG_LOCAL1 = _const "MLton_Syslog_Facility_LOG_LOCAL1" : C_Int.t;
val LOG_LOCAL2 = _const "MLton_Syslog_Facility_LOG_LOCAL2" : C_Int.t;
val LOG_LOCAL3 = _const "MLton_Syslog_Facility_LOG_LOCAL3" : C_Int.t;
val LOG_LOCAL4 = _const "MLton_Syslog_Facility_LOG_LOCAL4" : C_Int.t;
val LOG_LOCAL5 = _const "MLton_Syslog_Facility_LOG_LOCAL5" : C_Int.t;
val LOG_LOCAL6 = _const "MLton_Syslog_Facility_LOG_LOCAL6" : C_Int.t;
val LOG_LOCAL7 = _const "MLton_Syslog_Facility_LOG_LOCAL7" : C_Int.t;
val LOG_LPR = _const "MLton_Syslog_Facility_LOG_LPR" : C_Int.t;
val LOG_MAIL = _const "MLton_Syslog_Facility_LOG_MAIL" : C_Int.t;
val LOG_NEWS = _const "MLton_Syslog_Facility_LOG_NEWS" : C_Int.t;
val LOG_SYSLOG = _const "MLton_Syslog_Facility_LOG_SYSLOG" : C_Int.t;
val LOG_USER = _const "MLton_Syslog_Facility_LOG_USER" : C_Int.t;
val LOG_UUCP = _const "MLton_Syslog_Facility_LOG_UUCP" : C_Int.t;
end
structure Logopt = 
struct
val LOG_CONS = _const "MLton_Syslog_Logopt_LOG_CONS" : C_Int.t;
val LOG_NDELAY = _const "MLton_Syslog_Logopt_LOG_NDELAY" : C_Int.t;
val LOG_NOWAIT = _const "MLton_Syslog_Logopt_LOG_NOWAIT" : C_Int.t;
val LOG_ODELAY = _const "MLton_Syslog_Logopt_LOG_ODELAY" : C_Int.t;
val LOG_PERROR = _const "MLton_Syslog_Logopt_LOG_PERROR" : C_Int.t;
val LOG_PID = _const "MLton_Syslog_Logopt_LOG_PID" : C_Int.t;
end
val openlog = _import "MLton_Syslog_openlog" private : NullString8.t * C_Int.t * C_Int.t -> unit;
structure Severity = 
struct
val LOG_ALERT = _const "MLton_Syslog_Severity_LOG_ALERT" : C_Int.t;
val LOG_CRIT = _const "MLton_Syslog_Severity_LOG_CRIT" : C_Int.t;
val LOG_DEBUG = _const "MLton_Syslog_Severity_LOG_DEBUG" : C_Int.t;
val LOG_EMERG = _const "MLton_Syslog_Severity_LOG_EMERG" : C_Int.t;
val LOG_ERR = _const "MLton_Syslog_Severity_LOG_ERR" : C_Int.t;
val LOG_INFO = _const "MLton_Syslog_Severity_LOG_INFO" : C_Int.t;
val LOG_NOTICE = _const "MLton_Syslog_Severity_LOG_NOTICE" : C_Int.t;
val LOG_WARNING = _const "MLton_Syslog_Severity_LOG_WARNING" : C_Int.t;
end
val syslog = _import "MLton_Syslog_syslog" private : C_Int.t * NullString8.t -> unit;
end
end
structure Net = 
struct
val htonl = _import "Net_htonl" private : Word32.t -> Word32.t;
val htons = _import "Net_htons" private : Word16.t -> Word16.t;
val ntohl = _import "Net_ntohl" private : Word32.t -> Word32.t;
val ntohs = _import "Net_ntohs" private : Word16.t -> Word16.t;
end
structure NetHostDB = 
struct
val getByAddress = _import "NetHostDB_getByAddress" private : (Word8.t) vector * C_Socklen.t -> C_Int.t;
val getByName = _import "NetHostDB_getByName" private : NullString8.t -> C_Int.t;
val getEntryAddrsN = _import "NetHostDB_getEntryAddrsN" private : C_Int.t * (Word8.t) array -> unit;
val getEntryAddrsNum = _import "NetHostDB_getEntryAddrsNum" private : unit -> C_Int.t;
val getEntryAddrType = _import "NetHostDB_getEntryAddrType" private : unit -> C_Int.t;
val getEntryAliasesN = _import "NetHostDB_getEntryAliasesN" private : C_Int.t -> C_String.t;
val getEntryAliasesNum = _import "NetHostDB_getEntryAliasesNum" private : unit -> C_Int.t;
val getEntryLength = _import "NetHostDB_getEntryLength" private : unit -> C_Int.t;
val getEntryName = _import "NetHostDB_getEntryName" private : unit -> C_String.t;
val getHostName = _import "NetHostDB_getHostName" private : (Char8.t) array * C_Size.t -> (C_Int.t) C_Errno.t;
val INADDR_ANY = _const "NetHostDB_INADDR_ANY" : C_Int.t;
val inAddrSize = _const "NetHostDB_inAddrSize" : C_Size.t;
end
structure NetProtDB = 
struct
val getByName = _import "NetProtDB_getByName" private : NullString8.t -> C_Int.t;
val getByNumber = _import "NetProtDB_getByNumber" private : C_Int.t -> C_Int.t;
val getEntryAliasesN = _import "NetProtDB_getEntryAliasesN" private : C_Int.t -> C_String.t;
val getEntryAliasesNum = _import "NetProtDB_getEntryAliasesNum" private : unit -> C_Int.t;
val getEntryName = _import "NetProtDB_getEntryName" private : unit -> C_String.t;
val getEntryProto = _import "NetProtDB_getEntryProto" private : unit -> C_Int.t;
end
structure NetServDB = 
struct
val getByName = _import "NetServDB_getByName" private : NullString8.t * NullString8.t -> C_Int.t;
val getByNameNull = _import "NetServDB_getByNameNull" private : NullString8.t -> C_Int.t;
val getByPort = _import "NetServDB_getByPort" private : C_Int.t * NullString8.t -> C_Int.t;
val getByPortNull = _import "NetServDB_getByPortNull" private : C_Int.t -> C_Int.t;
val getEntryAliasesN = _import "NetServDB_getEntryAliasesN" private : C_Int.t -> C_String.t;
val getEntryAliasesNum = _import "NetServDB_getEntryAliasesNum" private : unit -> C_Int.t;
val getEntryName = _import "NetServDB_getEntryName" private : unit -> C_String.t;
val getEntryPort = _import "NetServDB_getEntryPort" private : unit -> C_Int.t;
val getEntryProto = _import "NetServDB_getEntryProto" private : unit -> C_String.t;
end
structure OS = 
struct
structure IO = 
struct
val poll = _import "OS_IO_poll" private : (C_Fd.t) vector * (C_Short.t) vector * C_NFds.t * C_Int.t * (C_Short.t) array -> (C_Int.t) C_Errno.t;
val POLLIN = _const "OS_IO_POLLIN" : C_Short.t;
val POLLOUT = _const "OS_IO_POLLOUT" : C_Short.t;
val POLLPRI = _const "OS_IO_POLLPRI" : C_Short.t;
end
end
structure Posix = 
struct
structure Error = 
struct
val clearErrno = _import "Posix_Error_clearErrno" private : unit -> unit;
val E2BIG = _const "Posix_Error_E2BIG" : C_Int.t;
val EACCES = _const "Posix_Error_EACCES" : C_Int.t;
val EADDRINUSE = _const "Posix_Error_EADDRINUSE" : C_Int.t;
val EADDRNOTAVAIL = _const "Posix_Error_EADDRNOTAVAIL" : C_Int.t;
val EAFNOSUPPORT = _const "Posix_Error_EAFNOSUPPORT" : C_Int.t;
val EAGAIN = _const "Posix_Error_EAGAIN" : C_Int.t;
val EALREADY = _const "Posix_Error_EALREADY" : C_Int.t;
val EBADF = _const "Posix_Error_EBADF" : C_Int.t;
val EBADMSG = _const "Posix_Error_EBADMSG" : C_Int.t;
val EBUSY = _const "Posix_Error_EBUSY" : C_Int.t;
val ECANCELED = _const "Posix_Error_ECANCELED" : C_Int.t;
val ECHILD = _const "Posix_Error_ECHILD" : C_Int.t;
val ECONNABORTED = _const "Posix_Error_ECONNABORTED" : C_Int.t;
val ECONNREFUSED = _const "Posix_Error_ECONNREFUSED" : C_Int.t;
val ECONNRESET = _const "Posix_Error_ECONNRESET" : C_Int.t;
val EDEADLK = _const "Posix_Error_EDEADLK" : C_Int.t;
val EDESTADDRREQ = _const "Posix_Error_EDESTADDRREQ" : C_Int.t;
val EDOM = _const "Posix_Error_EDOM" : C_Int.t;
val EDQUOT = _const "Posix_Error_EDQUOT" : C_Int.t;
val EEXIST = _const "Posix_Error_EEXIST" : C_Int.t;
val EFAULT = _const "Posix_Error_EFAULT" : C_Int.t;
val EFBIG = _const "Posix_Error_EFBIG" : C_Int.t;
val EHOSTUNREACH = _const "Posix_Error_EHOSTUNREACH" : C_Int.t;
val EIDRM = _const "Posix_Error_EIDRM" : C_Int.t;
val EILSEQ = _const "Posix_Error_EILSEQ" : C_Int.t;
val EINPROGRESS = _const "Posix_Error_EINPROGRESS" : C_Int.t;
val EINTR = _const "Posix_Error_EINTR" : C_Int.t;
val EINVAL = _const "Posix_Error_EINVAL" : C_Int.t;
val EIO = _const "Posix_Error_EIO" : C_Int.t;
val EISCONN = _const "Posix_Error_EISCONN" : C_Int.t;
val EISDIR = _const "Posix_Error_EISDIR" : C_Int.t;
val ELOOP = _const "Posix_Error_ELOOP" : C_Int.t;
val EMFILE = _const "Posix_Error_EMFILE" : C_Int.t;
val EMLINK = _const "Posix_Error_EMLINK" : C_Int.t;
val EMSGSIZE = _const "Posix_Error_EMSGSIZE" : C_Int.t;
val EMULTIHOP = _const "Posix_Error_EMULTIHOP" : C_Int.t;
val ENAMETOOLONG = _const "Posix_Error_ENAMETOOLONG" : C_Int.t;
val ENETDOWN = _const "Posix_Error_ENETDOWN" : C_Int.t;
val ENETRESET = _const "Posix_Error_ENETRESET" : C_Int.t;
val ENETUNREACH = _const "Posix_Error_ENETUNREACH" : C_Int.t;
val ENFILE = _const "Posix_Error_ENFILE" : C_Int.t;
val ENOBUFS = _const "Posix_Error_ENOBUFS" : C_Int.t;
val ENODATA = _const "Posix_Error_ENODATA" : C_Int.t;
val ENODEV = _const "Posix_Error_ENODEV" : C_Int.t;
val ENOENT = _const "Posix_Error_ENOENT" : C_Int.t;
val ENOEXEC = _const "Posix_Error_ENOEXEC" : C_Int.t;
val ENOLCK = _const "Posix_Error_ENOLCK" : C_Int.t;
val ENOLINK = _const "Posix_Error_ENOLINK" : C_Int.t;
val ENOMEM = _const "Posix_Error_ENOMEM" : C_Int.t;
val ENOMSG = _const "Posix_Error_ENOMSG" : C_Int.t;
val ENOPROTOOPT = _const "Posix_Error_ENOPROTOOPT" : C_Int.t;
val ENOSPC = _const "Posix_Error_ENOSPC" : C_Int.t;
val ENOSR = _const "Posix_Error_ENOSR" : C_Int.t;
val ENOSTR = _const "Posix_Error_ENOSTR" : C_Int.t;
val ENOSYS = _const "Posix_Error_ENOSYS" : C_Int.t;
val ENOTCONN = _const "Posix_Error_ENOTCONN" : C_Int.t;
val ENOTDIR = _const "Posix_Error_ENOTDIR" : C_Int.t;
val ENOTEMPTY = _const "Posix_Error_ENOTEMPTY" : C_Int.t;
val ENOTSOCK = _const "Posix_Error_ENOTSOCK" : C_Int.t;
val ENOTSUP = _const "Posix_Error_ENOTSUP" : C_Int.t;
val ENOTTY = _const "Posix_Error_ENOTTY" : C_Int.t;
val ENXIO = _const "Posix_Error_ENXIO" : C_Int.t;
val EOPNOTSUPP = _const "Posix_Error_EOPNOTSUPP" : C_Int.t;
val EOVERFLOW = _const "Posix_Error_EOVERFLOW" : C_Int.t;
val EPERM = _const "Posix_Error_EPERM" : C_Int.t;
val EPIPE = _const "Posix_Error_EPIPE" : C_Int.t;
val EPROTO = _const "Posix_Error_EPROTO" : C_Int.t;
val EPROTONOSUPPORT = _const "Posix_Error_EPROTONOSUPPORT" : C_Int.t;
val EPROTOTYPE = _const "Posix_Error_EPROTOTYPE" : C_Int.t;
val ERANGE = _const "Posix_Error_ERANGE" : C_Int.t;
val EROFS = _const "Posix_Error_EROFS" : C_Int.t;
val ESPIPE = _const "Posix_Error_ESPIPE" : C_Int.t;
val ESRCH = _const "Posix_Error_ESRCH" : C_Int.t;
val ESTALE = _const "Posix_Error_ESTALE" : C_Int.t;
val ETIME = _const "Posix_Error_ETIME" : C_Int.t;
val ETIMEDOUT = _const "Posix_Error_ETIMEDOUT" : C_Int.t;
val ETXTBSY = _const "Posix_Error_ETXTBSY" : C_Int.t;
val EWOULDBLOCK = _const "Posix_Error_EWOULDBLOCK" : C_Int.t;
val EXDEV = _const "Posix_Error_EXDEV" : C_Int.t;
val getErrno = _import "Posix_Error_getErrno" private : unit -> C_Int.t;
val strError = _import "Posix_Error_strError" private : C_Int.t -> C_String.t;
end
structure FileSys = 
struct
structure A = 
struct
val F_OK = _const "Posix_FileSys_A_F_OK" : C_Int.t;
val R_OK = _const "Posix_FileSys_A_R_OK" : C_Int.t;
val W_OK = _const "Posix_FileSys_A_W_OK" : C_Int.t;
val X_OK = _const "Posix_FileSys_A_X_OK" : C_Int.t;
end
val access = _import "Posix_FileSys_access" private : NullString8.t * C_Int.t -> (C_Int.t) C_Errno.t;
val chdir = _import "Posix_FileSys_chdir" private : NullString8.t -> (C_Int.t) C_Errno.t;
val chmod = _import "Posix_FileSys_chmod" private : NullString8.t * C_Mode.t -> (C_Int.t) C_Errno.t;
val chown = _import "Posix_FileSys_chown" private : NullString8.t * C_UId.t * C_GId.t -> (C_Int.t) C_Errno.t;
structure Dirstream = 
struct
val closeDir = _import "Posix_FileSys_Dirstream_closeDir" private : C_DirP.t -> (C_Int.t) C_Errno.t;
val openDir = _import "Posix_FileSys_Dirstream_openDir" private : NullString8.t -> (C_DirP.t) C_Errno.t;
val readDir = _import "Posix_FileSys_Dirstream_readDir" private : C_DirP.t -> (C_String.t) C_Errno.t;
val rewindDir = _import "Posix_FileSys_Dirstream_rewindDir" private : C_DirP.t -> unit;
end
val fchdir = _import "Posix_FileSys_fchdir" private : C_Fd.t -> (C_Int.t) C_Errno.t;
val fchmod = _import "Posix_FileSys_fchmod" private : C_Fd.t * C_Mode.t -> (C_Int.t) C_Errno.t;
val fchown = _import "Posix_FileSys_fchown" private : C_Fd.t * C_UId.t * C_GId.t -> (C_Int.t) C_Errno.t;
val fpathconf = _import "Posix_FileSys_fpathconf" private : C_Fd.t * C_Int.t -> (C_Long.t) C_Errno.t;
val ftruncate = _import "Posix_FileSys_ftruncate" private : C_Fd.t * C_Off.t -> (C_Int.t) C_Errno.t;
val getcwd = _import "Posix_FileSys_getcwd" private : (Char8.t) array * C_Size.t -> (C_String.t) C_Errno.t;
val link = _import "Posix_FileSys_link" private : NullString8.t * NullString8.t -> (C_Int.t) C_Errno.t;
val mkdir = _import "Posix_FileSys_mkdir" private : NullString8.t * C_Mode.t -> (C_Int.t) C_Errno.t;
val mkfifo = _import "Posix_FileSys_mkfifo" private : NullString8.t * C_Mode.t -> (C_Int.t) C_Errno.t;
structure O = 
struct
val APPEND = _const "Posix_FileSys_O_APPEND" : C_Int.t;
val BINARY = _const "Posix_FileSys_O_BINARY" : C_Int.t;
val CREAT = _const "Posix_FileSys_O_CREAT" : C_Int.t;
val DSYNC = _const "Posix_FileSys_O_DSYNC" : C_Int.t;
val EXCL = _const "Posix_FileSys_O_EXCL" : C_Int.t;
val NOCTTY = _const "Posix_FileSys_O_NOCTTY" : C_Int.t;
val NONBLOCK = _const "Posix_FileSys_O_NONBLOCK" : C_Int.t;
val RDONLY = _const "Posix_FileSys_O_RDONLY" : C_Int.t;
val RDWR = _const "Posix_FileSys_O_RDWR" : C_Int.t;
val RSYNC = _const "Posix_FileSys_O_RSYNC" : C_Int.t;
val SYNC = _const "Posix_FileSys_O_SYNC" : C_Int.t;
val TEXT = _const "Posix_FileSys_O_TEXT" : C_Int.t;
val TRUNC = _const "Posix_FileSys_O_TRUNC" : C_Int.t;
val WRONLY = _const "Posix_FileSys_O_WRONLY" : C_Int.t;
end
val open2 = _import "Posix_FileSys_open2" private : NullString8.t * C_Int.t -> (C_Fd.t) C_Errno.t;
val open3 = _import "Posix_FileSys_open3" private : NullString8.t * C_Int.t * C_Mode.t -> (C_Fd.t) C_Errno.t;
val pathconf = _import "Posix_FileSys_pathconf" private : NullString8.t * C_Int.t -> (C_Long.t) C_Errno.t;
structure PC = 
struct
val ALLOC_SIZE_MIN = _const "Posix_FileSys_PC_ALLOC_SIZE_MIN" : C_Int.t;
val ASYNC_IO = _const "Posix_FileSys_PC_ASYNC_IO" : C_Int.t;
val CHOWN_RESTRICTED = _const "Posix_FileSys_PC_CHOWN_RESTRICTED" : C_Int.t;
val FILESIZEBITS = _const "Posix_FileSys_PC_FILESIZEBITS" : C_Int.t;
val LINK_MAX = _const "Posix_FileSys_PC_LINK_MAX" : C_Int.t;
val MAX_CANON = _const "Posix_FileSys_PC_MAX_CANON" : C_Int.t;
val MAX_INPUT = _const "Posix_FileSys_PC_MAX_INPUT" : C_Int.t;
val NAME_MAX = _const "Posix_FileSys_PC_NAME_MAX" : C_Int.t;
val NO_TRUNC = _const "Posix_FileSys_PC_NO_TRUNC" : C_Int.t;
val PATH_MAX = _const "Posix_FileSys_PC_PATH_MAX" : C_Int.t;
val PIPE_BUF = _const "Posix_FileSys_PC_PIPE_BUF" : C_Int.t;
val PRIO_IO = _const "Posix_FileSys_PC_PRIO_IO" : C_Int.t;
val REC_INCR_XFER_SIZE = _const "Posix_FileSys_PC_REC_INCR_XFER_SIZE" : C_Int.t;
val REC_MAX_XFER_SIZE = _const "Posix_FileSys_PC_REC_MAX_XFER_SIZE" : C_Int.t;
val REC_MIN_XFER_SIZE = _const "Posix_FileSys_PC_REC_MIN_XFER_SIZE" : C_Int.t;
val REC_XFER_ALIGN = _const "Posix_FileSys_PC_REC_XFER_ALIGN" : C_Int.t;
val SYMLINK_MAX = _const "Posix_FileSys_PC_SYMLINK_MAX" : C_Int.t;
val SYNC_IO = _const "Posix_FileSys_PC_SYNC_IO" : C_Int.t;
val TWO_SYMLINKS = _const "Posix_FileSys_PC_TWO_SYMLINKS" : C_Int.t;
val VDISABLE = _const "Posix_FileSys_PC_VDISABLE" : C_Int.t;
end
val readlink = _import "Posix_FileSys_readlink" private : NullString8.t * (Char8.t) array * C_Size.t -> (C_SSize.t) C_Errno.t;
val rename = _import "Posix_FileSys_rename" private : NullString8.t * NullString8.t -> (C_Int.t) C_Errno.t;
val rmdir = _import "Posix_FileSys_rmdir" private : NullString8.t -> (C_Int.t) C_Errno.t;
structure S = 
struct
val IFBLK = _const "Posix_FileSys_S_IFBLK" : C_Mode.t;
val IFCHR = _const "Posix_FileSys_S_IFCHR" : C_Mode.t;
val IFDIR = _const "Posix_FileSys_S_IFDIR" : C_Mode.t;
val IFIFO = _const "Posix_FileSys_S_IFIFO" : C_Mode.t;
val IFLNK = _const "Posix_FileSys_S_IFLNK" : C_Mode.t;
val IFMT = _const "Posix_FileSys_S_IFMT" : C_Mode.t;
val IFREG = _const "Posix_FileSys_S_IFREG" : C_Mode.t;
val IFSOCK = _const "Posix_FileSys_S_IFSOCK" : C_Mode.t;
val IRGRP = _const "Posix_FileSys_S_IRGRP" : C_Mode.t;
val IROTH = _const "Posix_FileSys_S_IROTH" : C_Mode.t;
val IRUSR = _const "Posix_FileSys_S_IRUSR" : C_Mode.t;
val IRWXG = _const "Posix_FileSys_S_IRWXG" : C_Mode.t;
val IRWXO = _const "Posix_FileSys_S_IRWXO" : C_Mode.t;
val IRWXU = _const "Posix_FileSys_S_IRWXU" : C_Mode.t;
val ISGID = _const "Posix_FileSys_S_ISGID" : C_Mode.t;
val ISUID = _const "Posix_FileSys_S_ISUID" : C_Mode.t;
val ISVTX = _const "Posix_FileSys_S_ISVTX" : C_Mode.t;
val IWGRP = _const "Posix_FileSys_S_IWGRP" : C_Mode.t;
val IWOTH = _const "Posix_FileSys_S_IWOTH" : C_Mode.t;
val IWUSR = _const "Posix_FileSys_S_IWUSR" : C_Mode.t;
val IXGRP = _const "Posix_FileSys_S_IXGRP" : C_Mode.t;
val IXOTH = _const "Posix_FileSys_S_IXOTH" : C_Mode.t;
val IXUSR = _const "Posix_FileSys_S_IXUSR" : C_Mode.t;
end
structure ST = 
struct
val isBlk = _import "Posix_FileSys_ST_isBlk" private : C_Mode.t -> C_Int.t;
val isChr = _import "Posix_FileSys_ST_isChr" private : C_Mode.t -> C_Int.t;
val isDir = _import "Posix_FileSys_ST_isDir" private : C_Mode.t -> C_Int.t;
val isFIFO = _import "Posix_FileSys_ST_isFIFO" private : C_Mode.t -> C_Int.t;
val isLink = _import "Posix_FileSys_ST_isLink" private : C_Mode.t -> C_Int.t;
val isReg = _import "Posix_FileSys_ST_isReg" private : C_Mode.t -> C_Int.t;
val isSock = _import "Posix_FileSys_ST_isSock" private : C_Mode.t -> C_Int.t;
end
structure Stat = 
struct
val fstat = _import "Posix_FileSys_Stat_fstat" private : C_Fd.t -> (C_Int.t) C_Errno.t;
val getATime = _import "Posix_FileSys_Stat_getATime" private : unit -> C_Time.t;
val getCTime = _import "Posix_FileSys_Stat_getCTime" private : unit -> C_Time.t;
val getDev = _import "Posix_FileSys_Stat_getDev" private : unit -> C_Dev.t;
val getGId = _import "Posix_FileSys_Stat_getGId" private : unit -> C_GId.t;
val getINo = _import "Posix_FileSys_Stat_getINo" private : unit -> C_INo.t;
val getMode = _import "Posix_FileSys_Stat_getMode" private : unit -> C_Mode.t;
val getMTime = _import "Posix_FileSys_Stat_getMTime" private : unit -> C_Time.t;
val getNLink = _import "Posix_FileSys_Stat_getNLink" private : unit -> C_NLink.t;
val getRDev = _import "Posix_FileSys_Stat_getRDev" private : unit -> C_Dev.t;
val getSize = _import "Posix_FileSys_Stat_getSize" private : unit -> C_Off.t;
val getUId = _import "Posix_FileSys_Stat_getUId" private : unit -> C_UId.t;
val lstat = _import "Posix_FileSys_Stat_lstat" private : NullString8.t -> (C_Int.t) C_Errno.t;
val stat = _import "Posix_FileSys_Stat_stat" private : NullString8.t -> (C_Int.t) C_Errno.t;
end
val symlink = _import "Posix_FileSys_symlink" private : NullString8.t * NullString8.t -> (C_Int.t) C_Errno.t;
val truncate = _import "Posix_FileSys_truncate" private : NullString8.t * C_Off.t -> (C_Int.t) C_Errno.t;
val umask = _import "Posix_FileSys_umask" private : C_Mode.t -> C_Mode.t;
val unlink = _import "Posix_FileSys_unlink" private : NullString8.t -> (C_Int.t) C_Errno.t;
structure Utimbuf = 
struct
val setAcTime = _import "Posix_FileSys_Utimbuf_setAcTime" private : C_Time.t -> unit;
val setModTime = _import "Posix_FileSys_Utimbuf_setModTime" private : C_Time.t -> unit;
val utime = _import "Posix_FileSys_Utimbuf_utime" private : NullString8.t -> (C_Int.t) C_Errno.t;
end
end
structure IO = 
struct
val close = _import "Posix_IO_close" private : C_Fd.t -> (C_Int.t) C_Errno.t;
val dup = _import "Posix_IO_dup" private : C_Fd.t -> (C_Fd.t) C_Errno.t;
val dup2 = _import "Posix_IO_dup2" private : C_Fd.t * C_Fd.t -> (C_Fd.t) C_Errno.t;
val F_DUPFD = _const "Posix_IO_F_DUPFD" : C_Int.t;
val F_GETFD = _const "Posix_IO_F_GETFD" : C_Int.t;
val F_GETFL = _const "Posix_IO_F_GETFL" : C_Int.t;
val F_GETOWN = _const "Posix_IO_F_GETOWN" : C_Int.t;
val F_SETFD = _const "Posix_IO_F_SETFD" : C_Int.t;
val F_SETFL = _const "Posix_IO_F_SETFL" : C_Int.t;
val F_SETOWN = _const "Posix_IO_F_SETOWN" : C_Int.t;
val fcntl2 = _import "Posix_IO_fcntl2" private : C_Fd.t * C_Int.t -> (C_Int.t) C_Errno.t;
val fcntl3 = _import "Posix_IO_fcntl3" private : C_Fd.t * C_Int.t * C_Int.t -> (C_Int.t) C_Errno.t;
structure FD = 
struct
val CLOEXEC = _const "Posix_IO_FD_CLOEXEC" : C_Int.t;
end
structure FLock = 
struct
val F_GETLK = _const "Posix_IO_FLock_F_GETLK" : C_Int.t;
val F_RDLCK = _const "Posix_IO_FLock_F_RDLCK" : C_Short.t;
val F_SETLK = _const "Posix_IO_FLock_F_SETLK" : C_Int.t;
val F_SETLKW = _const "Posix_IO_FLock_F_SETLKW" : C_Int.t;
val F_UNLCK = _const "Posix_IO_FLock_F_UNLCK" : C_Short.t;
val F_WRLCK = _const "Posix_IO_FLock_F_WRLCK" : C_Short.t;
val fcntl = _import "Posix_IO_FLock_fcntl" private : C_Fd.t * C_Int.t -> (C_Int.t) C_Errno.t;
val getLen = _import "Posix_IO_FLock_getLen" private : unit -> C_Off.t;
val getPId = _import "Posix_IO_FLock_getPId" private : unit -> C_PId.t;
val getStart = _import "Posix_IO_FLock_getStart" private : unit -> C_Off.t;
val getType = _import "Posix_IO_FLock_getType" private : unit -> C_Short.t;
val getWhence = _import "Posix_IO_FLock_getWhence" private : unit -> C_Short.t;
val SEEK_CUR = _const "Posix_IO_FLock_SEEK_CUR" : C_Short.t;
val SEEK_END = _const "Posix_IO_FLock_SEEK_END" : C_Short.t;
val SEEK_SET = _const "Posix_IO_FLock_SEEK_SET" : C_Short.t;
val setLen = _import "Posix_IO_FLock_setLen" private : C_Off.t -> unit;
val setPId = _import "Posix_IO_FLock_setPId" private : C_PId.t -> unit;
val setStart = _import "Posix_IO_FLock_setStart" private : C_Off.t -> unit;
val setType = _import "Posix_IO_FLock_setType" private : C_Short.t -> unit;
val setWhence = _import "Posix_IO_FLock_setWhence" private : C_Short.t -> unit;
end
val fsync = _import "Posix_IO_fsync" private : C_Fd.t -> (C_Int.t) C_Errno.t;
val lseek = _import "Posix_IO_lseek" private : C_Fd.t * C_Off.t * C_Int.t -> (C_Off.t) C_Errno.t;
val O_ACCMODE = _const "Posix_IO_O_ACCMODE" : C_Int.t;
val pipe = _import "Posix_IO_pipe" private : (C_Fd.t) array -> (C_Int.t) C_Errno.t;
val readChar8 = _import "Posix_IO_readChar8" private : C_Fd.t * (Char8.t) array * C_Int.t * C_Size.t -> (C_SSize.t) C_Errno.t;
val readWord8 = _import "Posix_IO_readWord8" private : C_Fd.t * (Word8.t) array * C_Int.t * C_Size.t -> (C_SSize.t) C_Errno.t;
val SEEK_CUR = _const "Posix_IO_SEEK_CUR" : C_Int.t;
val SEEK_END = _const "Posix_IO_SEEK_END" : C_Int.t;
val SEEK_SET = _const "Posix_IO_SEEK_SET" : C_Int.t;
val setbin = _import "Posix_IO_setbin" private : C_Fd.t -> unit;
val settext = _import "Posix_IO_settext" private : C_Fd.t -> unit;
val writeChar8Arr = _import "Posix_IO_writeChar8Arr" private : C_Fd.t * (Char8.t) array * C_Int.t * C_Size.t -> (C_SSize.t) C_Errno.t;
val writeChar8Vec = _import "Posix_IO_writeChar8Vec" private : C_Fd.t * (Char8.t) vector * C_Int.t * C_Size.t -> (C_SSize.t) C_Errno.t;
val writeWord8Arr = _import "Posix_IO_writeWord8Arr" private : C_Fd.t * (Word8.t) array * C_Int.t * C_Size.t -> (C_SSize.t) C_Errno.t;
val writeWord8Vec = _import "Posix_IO_writeWord8Vec" private : C_Fd.t * (Word8.t) vector * C_Int.t * C_Size.t -> (C_SSize.t) C_Errno.t;
end
structure ProcEnv = 
struct
val ctermid = _import "Posix_ProcEnv_ctermid" private : unit -> C_String.t;
val (environGet, environSet) = _symbol "Posix_ProcEnv_environ" private : (unit -> (C_StringArray.t)) * ((C_StringArray.t) -> unit);
val getegid = _import "Posix_ProcEnv_getegid" private : unit -> C_GId.t;
val getenv = _import "Posix_ProcEnv_getenv" private : NullString8.t -> C_String.t;
val geteuid = _import "Posix_ProcEnv_geteuid" private : unit -> C_UId.t;
val getgid = _import "Posix_ProcEnv_getgid" private : unit -> C_GId.t;
val getgroups = _import "Posix_ProcEnv_getgroups" private : C_Int.t * (C_GId.t) array -> (C_Int.t) C_Errno.t;
val getgroupsN = _import "Posix_ProcEnv_getgroupsN" private : unit -> C_Int.t;
val getlogin = _import "Posix_ProcEnv_getlogin" private : unit -> (C_String.t) C_Errno.t;
val getpgrp = _import "Posix_ProcEnv_getpgrp" private : unit -> C_PId.t;
val getpid = _import "Posix_ProcEnv_getpid" private : unit -> C_PId.t;
val getppid = _import "Posix_ProcEnv_getppid" private : unit -> C_PId.t;
val getuid = _import "Posix_ProcEnv_getuid" private : unit -> C_UId.t;
val isatty = _import "Posix_ProcEnv_isatty" private : C_Fd.t -> C_Int.t;
val SC_2_C_BIND = _const "Posix_ProcEnv_SC_2_C_BIND" : C_Int.t;
val SC_2_C_DEV = _const "Posix_ProcEnv_SC_2_C_DEV" : C_Int.t;
val SC_2_CHAR_TERM = _const "Posix_ProcEnv_SC_2_CHAR_TERM" : C_Int.t;
val SC_2_FORT_DEV = _const "Posix_ProcEnv_SC_2_FORT_DEV" : C_Int.t;
val SC_2_FORT_RUN = _const "Posix_ProcEnv_SC_2_FORT_RUN" : C_Int.t;
val SC_2_LOCALEDEF = _const "Posix_ProcEnv_SC_2_LOCALEDEF" : C_Int.t;
val SC_2_PBS = _const "Posix_ProcEnv_SC_2_PBS" : C_Int.t;
val SC_2_PBS_ACCOUNTING = _const "Posix_ProcEnv_SC_2_PBS_ACCOUNTING" : C_Int.t;
val SC_2_PBS_CHECKPOINT = _const "Posix_ProcEnv_SC_2_PBS_CHECKPOINT" : C_Int.t;
val SC_2_PBS_LOCATE = _const "Posix_ProcEnv_SC_2_PBS_LOCATE" : C_Int.t;
val SC_2_PBS_MESSAGE = _const "Posix_ProcEnv_SC_2_PBS_MESSAGE" : C_Int.t;
val SC_2_PBS_TRACK = _const "Posix_ProcEnv_SC_2_PBS_TRACK" : C_Int.t;
val SC_2_SW_DEV = _const "Posix_ProcEnv_SC_2_SW_DEV" : C_Int.t;
val SC_2_UPE = _const "Posix_ProcEnv_SC_2_UPE" : C_Int.t;
val SC_2_VERSION = _const "Posix_ProcEnv_SC_2_VERSION" : C_Int.t;
val SC_ADVISORY_INFO = _const "Posix_ProcEnv_SC_ADVISORY_INFO" : C_Int.t;
val SC_AIO_LISTIO_MAX = _const "Posix_ProcEnv_SC_AIO_LISTIO_MAX" : C_Int.t;
val SC_AIO_MAX = _const "Posix_ProcEnv_SC_AIO_MAX" : C_Int.t;
val SC_AIO_PRIO_DELTA_MAX = _const "Posix_ProcEnv_SC_AIO_PRIO_DELTA_MAX" : C_Int.t;
val SC_ARG_MAX = _const "Posix_ProcEnv_SC_ARG_MAX" : C_Int.t;
val SC_ASYNCHRONOUS_IO = _const "Posix_ProcEnv_SC_ASYNCHRONOUS_IO" : C_Int.t;
val SC_ATEXIT_MAX = _const "Posix_ProcEnv_SC_ATEXIT_MAX" : C_Int.t;
val SC_AVPHYS_PAGES = _const "Posix_ProcEnv_SC_AVPHYS_PAGES" : C_Int.t;
val SC_BARRIERS = _const "Posix_ProcEnv_SC_BARRIERS" : C_Int.t;
val SC_BC_BASE_MAX = _const "Posix_ProcEnv_SC_BC_BASE_MAX" : C_Int.t;
val SC_BC_DIM_MAX = _const "Posix_ProcEnv_SC_BC_DIM_MAX" : C_Int.t;
val SC_BC_SCALE_MAX = _const "Posix_ProcEnv_SC_BC_SCALE_MAX" : C_Int.t;
val SC_BC_STRING_MAX = _const "Posix_ProcEnv_SC_BC_STRING_MAX" : C_Int.t;
val SC_CHILD_MAX = _const "Posix_ProcEnv_SC_CHILD_MAX" : C_Int.t;
val SC_CLK_TCK = _const "Posix_ProcEnv_SC_CLK_TCK" : C_Int.t;
val SC_CLOCK_SELECTION = _const "Posix_ProcEnv_SC_CLOCK_SELECTION" : C_Int.t;
val SC_COLL_WEIGHTS_MAX = _const "Posix_ProcEnv_SC_COLL_WEIGHTS_MAX" : C_Int.t;
val SC_CPUTIME = _const "Posix_ProcEnv_SC_CPUTIME" : C_Int.t;
val SC_DELAYTIMER_MAX = _const "Posix_ProcEnv_SC_DELAYTIMER_MAX" : C_Int.t;
val SC_EXPR_NEST_MAX = _const "Posix_ProcEnv_SC_EXPR_NEST_MAX" : C_Int.t;
val SC_FSYNC = _const "Posix_ProcEnv_SC_FSYNC" : C_Int.t;
val SC_GETGR_R_SIZE_MAX = _const "Posix_ProcEnv_SC_GETGR_R_SIZE_MAX" : C_Int.t;
val SC_GETPW_R_SIZE_MAX = _const "Posix_ProcEnv_SC_GETPW_R_SIZE_MAX" : C_Int.t;
val SC_HOST_NAME_MAX = _const "Posix_ProcEnv_SC_HOST_NAME_MAX" : C_Int.t;
val SC_IOV_MAX = _const "Posix_ProcEnv_SC_IOV_MAX" : C_Int.t;
val SC_IPV6 = _const "Posix_ProcEnv_SC_IPV6" : C_Int.t;
val SC_JOB_CONTROL = _const "Posix_ProcEnv_SC_JOB_CONTROL" : C_Int.t;
val SC_LINE_MAX = _const "Posix_ProcEnv_SC_LINE_MAX" : C_Int.t;
val SC_LOGIN_NAME_MAX = _const "Posix_ProcEnv_SC_LOGIN_NAME_MAX" : C_Int.t;
val SC_MAPPED_FILES = _const "Posix_ProcEnv_SC_MAPPED_FILES" : C_Int.t;
val SC_MEMLOCK = _const "Posix_ProcEnv_SC_MEMLOCK" : C_Int.t;
val SC_MEMLOCK_RANGE = _const "Posix_ProcEnv_SC_MEMLOCK_RANGE" : C_Int.t;
val SC_MEMORY_PROTECTION = _const "Posix_ProcEnv_SC_MEMORY_PROTECTION" : C_Int.t;
val SC_MESSAGE_PASSING = _const "Posix_ProcEnv_SC_MESSAGE_PASSING" : C_Int.t;
val SC_MONOTONIC_CLOCK = _const "Posix_ProcEnv_SC_MONOTONIC_CLOCK" : C_Int.t;
val SC_MQ_OPEN_MAX = _const "Posix_ProcEnv_SC_MQ_OPEN_MAX" : C_Int.t;
val SC_MQ_PRIO_MAX = _const "Posix_ProcEnv_SC_MQ_PRIO_MAX" : C_Int.t;
val SC_NGROUPS_MAX = _const "Posix_ProcEnv_SC_NGROUPS_MAX" : C_Int.t;
val SC_NPROCESSORS_CONF = _const "Posix_ProcEnv_SC_NPROCESSORS_CONF" : C_Int.t;
val SC_NPROCESSORS_ONLN = _const "Posix_ProcEnv_SC_NPROCESSORS_ONLN" : C_Int.t;
val SC_OPEN_MAX = _const "Posix_ProcEnv_SC_OPEN_MAX" : C_Int.t;
val SC_PAGE_SIZE = _const "Posix_ProcEnv_SC_PAGE_SIZE" : C_Int.t;
val SC_PAGESIZE = _const "Posix_ProcEnv_SC_PAGESIZE" : C_Int.t;
val SC_PHYS_PAGES = _const "Posix_ProcEnv_SC_PHYS_PAGES" : C_Int.t;
val SC_PRIORITIZED_IO = _const "Posix_ProcEnv_SC_PRIORITIZED_IO" : C_Int.t;
val SC_PRIORITY_SCHEDULING = _const "Posix_ProcEnv_SC_PRIORITY_SCHEDULING" : C_Int.t;
val SC_RAW_SOCKETS = _const "Posix_ProcEnv_SC_RAW_SOCKETS" : C_Int.t;
val SC_RE_DUP_MAX = _const "Posix_ProcEnv_SC_RE_DUP_MAX" : C_Int.t;
val SC_READER_WRITER_LOCKS = _const "Posix_ProcEnv_SC_READER_WRITER_LOCKS" : C_Int.t;
val SC_REALTIME_SIGNALS = _const "Posix_ProcEnv_SC_REALTIME_SIGNALS" : C_Int.t;
val SC_REGEXP = _const "Posix_ProcEnv_SC_REGEXP" : C_Int.t;
val SC_RTSIG_MAX = _const "Posix_ProcEnv_SC_RTSIG_MAX" : C_Int.t;
val SC_SAVED_IDS = _const "Posix_ProcEnv_SC_SAVED_IDS" : C_Int.t;
val SC_SEM_NSEMS_MAX = _const "Posix_ProcEnv_SC_SEM_NSEMS_MAX" : C_Int.t;
val SC_SEM_VALUE_MAX = _const "Posix_ProcEnv_SC_SEM_VALUE_MAX" : C_Int.t;
val SC_SEMAPHORES = _const "Posix_ProcEnv_SC_SEMAPHORES" : C_Int.t;
val SC_SHARED_MEMORY_OBJECTS = _const "Posix_ProcEnv_SC_SHARED_MEMORY_OBJECTS" : C_Int.t;
val SC_SHELL = _const "Posix_ProcEnv_SC_SHELL" : C_Int.t;
val SC_SIGQUEUE_MAX = _const "Posix_ProcEnv_SC_SIGQUEUE_MAX" : C_Int.t;
val SC_SPAWN = _const "Posix_ProcEnv_SC_SPAWN" : C_Int.t;
val SC_SPIN_LOCKS = _const "Posix_ProcEnv_SC_SPIN_LOCKS" : C_Int.t;
val SC_SPORADIC_SERVER = _const "Posix_ProcEnv_SC_SPORADIC_SERVER" : C_Int.t;
val SC_SS_REPL_MAX = _const "Posix_ProcEnv_SC_SS_REPL_MAX" : C_Int.t;
val SC_STREAM_MAX = _const "Posix_ProcEnv_SC_STREAM_MAX" : C_Int.t;
val SC_SYMLOOP_MAX = _const "Posix_ProcEnv_SC_SYMLOOP_MAX" : C_Int.t;
val SC_SYNCHRONIZED_IO = _const "Posix_ProcEnv_SC_SYNCHRONIZED_IO" : C_Int.t;
val SC_THREAD_ATTR_STACKADDR = _const "Posix_ProcEnv_SC_THREAD_ATTR_STACKADDR" : C_Int.t;
val SC_THREAD_ATTR_STACKSIZE = _const "Posix_ProcEnv_SC_THREAD_ATTR_STACKSIZE" : C_Int.t;
val SC_THREAD_CPUTIME = _const "Posix_ProcEnv_SC_THREAD_CPUTIME" : C_Int.t;
val SC_THREAD_DESTRUCTOR_ITERATIONS = _const "Posix_ProcEnv_SC_THREAD_DESTRUCTOR_ITERATIONS" : C_Int.t;
val SC_THREAD_KEYS_MAX = _const "Posix_ProcEnv_SC_THREAD_KEYS_MAX" : C_Int.t;
val SC_THREAD_PRIO_INHERIT = _const "Posix_ProcEnv_SC_THREAD_PRIO_INHERIT" : C_Int.t;
val SC_THREAD_PRIO_PROTECT = _const "Posix_ProcEnv_SC_THREAD_PRIO_PROTECT" : C_Int.t;
val SC_THREAD_PRIORITY_SCHEDULING = _const "Posix_ProcEnv_SC_THREAD_PRIORITY_SCHEDULING" : C_Int.t;
val SC_THREAD_PROCESS_SHARED = _const "Posix_ProcEnv_SC_THREAD_PROCESS_SHARED" : C_Int.t;
val SC_THREAD_SAFE_FUNCTIONS = _const "Posix_ProcEnv_SC_THREAD_SAFE_FUNCTIONS" : C_Int.t;
val SC_THREAD_SPORADIC_SERVER = _const "Posix_ProcEnv_SC_THREAD_SPORADIC_SERVER" : C_Int.t;
val SC_THREAD_STACK_MIN = _const "Posix_ProcEnv_SC_THREAD_STACK_MIN" : C_Int.t;
val SC_THREAD_THREADS_MAX = _const "Posix_ProcEnv_SC_THREAD_THREADS_MAX" : C_Int.t;
val SC_THREADS = _const "Posix_ProcEnv_SC_THREADS" : C_Int.t;
val SC_TIMEOUTS = _const "Posix_ProcEnv_SC_TIMEOUTS" : C_Int.t;
val SC_TIMER_MAX = _const "Posix_ProcEnv_SC_TIMER_MAX" : C_Int.t;
val SC_TIMERS = _const "Posix_ProcEnv_SC_TIMERS" : C_Int.t;
val SC_TRACE = _const "Posix_ProcEnv_SC_TRACE" : C_Int.t;
val SC_TRACE_EVENT_FILTER = _const "Posix_ProcEnv_SC_TRACE_EVENT_FILTER" : C_Int.t;
val SC_TRACE_EVENT_NAME_MAX = _const "Posix_ProcEnv_SC_TRACE_EVENT_NAME_MAX" : C_Int.t;
val SC_TRACE_INHERIT = _const "Posix_ProcEnv_SC_TRACE_INHERIT" : C_Int.t;
val SC_TRACE_LOG = _const "Posix_ProcEnv_SC_TRACE_LOG" : C_Int.t;
val SC_TRACE_NAME_MAX = _const "Posix_ProcEnv_SC_TRACE_NAME_MAX" : C_Int.t;
val SC_TRACE_SYS_MAX = _const "Posix_ProcEnv_SC_TRACE_SYS_MAX" : C_Int.t;
val SC_TRACE_USER_EVENT_MAX = _const "Posix_ProcEnv_SC_TRACE_USER_EVENT_MAX" : C_Int.t;
val SC_TTY_NAME_MAX = _const "Posix_ProcEnv_SC_TTY_NAME_MAX" : C_Int.t;
val SC_TYPED_MEMORY_OBJECTS = _const "Posix_ProcEnv_SC_TYPED_MEMORY_OBJECTS" : C_Int.t;
val SC_TZNAME_MAX = _const "Posix_ProcEnv_SC_TZNAME_MAX" : C_Int.t;
val SC_V6_ILP32_OFF32 = _const "Posix_ProcEnv_SC_V6_ILP32_OFF32" : C_Int.t;
val SC_V6_ILP32_OFFBIG = _const "Posix_ProcEnv_SC_V6_ILP32_OFFBIG" : C_Int.t;
val SC_V6_LP64_OFF64 = _const "Posix_ProcEnv_SC_V6_LP64_OFF64" : C_Int.t;
val SC_V6_LPBIG_OFFBIG = _const "Posix_ProcEnv_SC_V6_LPBIG_OFFBIG" : C_Int.t;
val SC_VERSION = _const "Posix_ProcEnv_SC_VERSION" : C_Int.t;
val SC_XBS5_ILP32_OFF32 = _const "Posix_ProcEnv_SC_XBS5_ILP32_OFF32" : C_Int.t;
val SC_XBS5_ILP32_OFFBIG = _const "Posix_ProcEnv_SC_XBS5_ILP32_OFFBIG" : C_Int.t;
val SC_XBS5_LP64_OFF64 = _const "Posix_ProcEnv_SC_XBS5_LP64_OFF64" : C_Int.t;
val SC_XBS5_LPBIG_OFFBIG = _const "Posix_ProcEnv_SC_XBS5_LPBIG_OFFBIG" : C_Int.t;
val SC_XOPEN_CRYPT = _const "Posix_ProcEnv_SC_XOPEN_CRYPT" : C_Int.t;
val SC_XOPEN_ENH_I18N = _const "Posix_ProcEnv_SC_XOPEN_ENH_I18N" : C_Int.t;
val SC_XOPEN_LEGACY = _const "Posix_ProcEnv_SC_XOPEN_LEGACY" : C_Int.t;
val SC_XOPEN_REALTIME = _const "Posix_ProcEnv_SC_XOPEN_REALTIME" : C_Int.t;
val SC_XOPEN_REALTIME_THREADS = _const "Posix_ProcEnv_SC_XOPEN_REALTIME_THREADS" : C_Int.t;
val SC_XOPEN_SHM = _const "Posix_ProcEnv_SC_XOPEN_SHM" : C_Int.t;
val SC_XOPEN_STREAMS = _const "Posix_ProcEnv_SC_XOPEN_STREAMS" : C_Int.t;
val SC_XOPEN_UNIX = _const "Posix_ProcEnv_SC_XOPEN_UNIX" : C_Int.t;
val SC_XOPEN_VERSION = _const "Posix_ProcEnv_SC_XOPEN_VERSION" : C_Int.t;
val setenv = _import "Posix_ProcEnv_setenv" private : NullString8.t * NullString8.t -> (C_Int.t) C_Errno.t;
val setgid = _import "Posix_ProcEnv_setgid" private : C_GId.t -> (C_Int.t) C_Errno.t;
val setgroups = _import "Posix_ProcEnv_setgroups" private : C_Int.t * (C_GId.t) vector -> (C_Int.t) C_Errno.t;
val setpgid = _import "Posix_ProcEnv_setpgid" private : C_PId.t * C_PId.t -> (C_Int.t) C_Errno.t;
val setsid = _import "Posix_ProcEnv_setsid" private : unit -> (C_PId.t) C_Errno.t;
val setuid = _import "Posix_ProcEnv_setuid" private : C_UId.t -> (C_Int.t) C_Errno.t;
val sysconf = _import "Posix_ProcEnv_sysconf" private : C_Int.t -> (C_Long.t) C_Errno.t;
val times = _import "Posix_ProcEnv_times" private : unit -> (C_Clock.t) C_Errno.t;
structure Times = 
struct
val getCSTime = _import "Posix_ProcEnv_Times_getCSTime" private : unit -> C_Clock.t;
val getCUTime = _import "Posix_ProcEnv_Times_getCUTime" private : unit -> C_Clock.t;
val getSTime = _import "Posix_ProcEnv_Times_getSTime" private : unit -> C_Clock.t;
val getUTime = _import "Posix_ProcEnv_Times_getUTime" private : unit -> C_Clock.t;
end
val ttyname = _import "Posix_ProcEnv_ttyname" private : C_Fd.t -> (C_String.t) C_Errno.t;
val uname = _import "Posix_ProcEnv_uname" private : unit -> (C_Int.t) C_Errno.t;
structure Uname = 
struct
val getMachine = _import "Posix_ProcEnv_Uname_getMachine" private : unit -> C_String.t;
val getNodeName = _import "Posix_ProcEnv_Uname_getNodeName" private : unit -> C_String.t;
val getRelease = _import "Posix_ProcEnv_Uname_getRelease" private : unit -> C_String.t;
val getSysName = _import "Posix_ProcEnv_Uname_getSysName" private : unit -> C_String.t;
val getVersion = _import "Posix_ProcEnv_Uname_getVersion" private : unit -> C_String.t;
end
end
structure Process = 
struct
val alarm = _import "Posix_Process_alarm" private : C_UInt.t -> C_UInt.t;
val exece = _import "Posix_Process_exece" private : NullString8.t * (NullString8.t) array * (NullString8.t) array -> (C_Int.t) C_Errno.t;
val execp = _import "Posix_Process_execp" private : NullString8.t * (NullString8.t) array -> (C_Int.t) C_Errno.t;
val exit = _import "Posix_Process_exit" private : C_Status.t -> unit;
val exitStatus = _import "Posix_Process_exitStatus" private : C_Status.t -> C_Int.t;
val fork = _import "Posix_Process_fork" private : unit -> (C_PId.t) C_Errno.t;
val ifExited = _import "Posix_Process_ifExited" private : C_Status.t -> C_Int.t;
val ifSignaled = _import "Posix_Process_ifSignaled" private : C_Status.t -> C_Int.t;
val ifStopped = _import "Posix_Process_ifStopped" private : C_Status.t -> C_Int.t;
val kill = _import "Posix_Process_kill" private : C_PId.t * C_Signal.t -> (C_Int.t) C_Errno.t;
val nanosleep = _import "Posix_Process_nanosleep" private : (C_Time.t) ref * (C_Long.t) ref -> (C_Int.t) C_Errno.t;
val pause = _import "Posix_Process_pause" private : unit -> (C_Int.t) C_Errno.t;
val sleep = _import "Posix_Process_sleep" private : C_UInt.t -> C_UInt.t;
val stopSig = _import "Posix_Process_stopSig" private : C_Status.t -> C_Signal.t;
val system = _import "Posix_Process_system" private : NullString8.t -> (C_Status.t) C_Errno.t;
val termSig = _import "Posix_Process_termSig" private : C_Status.t -> C_Signal.t;
structure W = 
struct
val NOHANG = _const "Posix_Process_W_NOHANG" : C_Int.t;
val UNTRACED = _const "Posix_Process_W_UNTRACED" : C_Int.t;
end
val waitpid = _import "Posix_Process_waitpid" private : C_PId.t * (C_Status.t) ref * C_Int.t -> (C_PId.t) C_Errno.t;
end
structure Signal = 
struct
val default = _import "Posix_Signal_default" private : C_Signal.t -> (C_Int.t) C_Errno.t;
val handlee = _import "Posix_Signal_handlee" private : C_Signal.t -> (C_Int.t) C_Errno.t;
val handleGC = _import "Posix_Signal_handleGC" private : unit -> unit;
val ignore = _import "Posix_Signal_ignore" private : C_Signal.t -> (C_Int.t) C_Errno.t;
val isDefault = _import "Posix_Signal_isDefault" private : C_Signal.t * (C_Int.t) ref -> (C_Int.t) C_Errno.t;
val isIgnore = _import "Posix_Signal_isIgnore" private : C_Signal.t * (C_Int.t) ref -> (C_Int.t) C_Errno.t;
val isPending = _import "Posix_Signal_isPending" private : C_Signal.t -> C_Int.t;
val isPendingGC = _import "Posix_Signal_isPendingGC" private : unit -> C_Int.t;
val NSIG = _const "Posix_Signal_NSIG" : C_Int.t;
val resetPending = _import "Posix_Signal_resetPending" private : unit -> unit;
val SIG_BLOCK = _const "Posix_Signal_SIG_BLOCK" : C_Int.t;
val SIG_SETMASK = _const "Posix_Signal_SIG_SETMASK" : C_Int.t;
val SIG_UNBLOCK = _const "Posix_Signal_SIG_UNBLOCK" : C_Int.t;
val SIGABRT = _const "Posix_Signal_SIGABRT" : C_Signal.t;
val sigaddset = _import "Posix_Signal_sigaddset" private : C_Signal.t -> (C_Int.t) C_Errno.t;
val SIGALRM = _const "Posix_Signal_SIGALRM" : C_Signal.t;
val SIGBUS = _const "Posix_Signal_SIGBUS" : C_Signal.t;
val SIGCHLD = _const "Posix_Signal_SIGCHLD" : C_Signal.t;
val SIGCONT = _const "Posix_Signal_SIGCONT" : C_Signal.t;
val sigdelset = _import "Posix_Signal_sigdelset" private : C_Signal.t -> (C_Int.t) C_Errno.t;
val sigemptyset = _import "Posix_Signal_sigemptyset" private : unit -> (C_Int.t) C_Errno.t;
val sigfillset = _import "Posix_Signal_sigfillset" private : unit -> (C_Int.t) C_Errno.t;
val SIGFPE = _const "Posix_Signal_SIGFPE" : C_Signal.t;
val SIGHUP = _const "Posix_Signal_SIGHUP" : C_Signal.t;
val SIGILL = _const "Posix_Signal_SIGILL" : C_Signal.t;
val SIGINT = _const "Posix_Signal_SIGINT" : C_Signal.t;
val sigismember = _import "Posix_Signal_sigismember" private : C_Signal.t -> (C_Int.t) C_Errno.t;
val SIGKILL = _const "Posix_Signal_SIGKILL" : C_Signal.t;
val SIGPIPE = _const "Posix_Signal_SIGPIPE" : C_Signal.t;
val SIGPOLL = _const "Posix_Signal_SIGPOLL" : C_Signal.t;
val sigprocmask = _import "Posix_Signal_sigprocmask" private : C_Int.t -> (C_Int.t) C_Errno.t;
val SIGPROF = _const "Posix_Signal_SIGPROF" : C_Signal.t;
val SIGQUIT = _const "Posix_Signal_SIGQUIT" : C_Signal.t;
val SIGSEGV = _const "Posix_Signal_SIGSEGV" : C_Signal.t;
val SIGSTOP = _const "Posix_Signal_SIGSTOP" : C_Signal.t;
val sigsuspend = _import "Posix_Signal_sigsuspend" private : unit -> unit;
val SIGSYS = _const "Posix_Signal_SIGSYS" : C_Signal.t;
val SIGTERM = _const "Posix_Signal_SIGTERM" : C_Signal.t;
val SIGTRAP = _const "Posix_Signal_SIGTRAP" : C_Signal.t;
val SIGTSTP = _const "Posix_Signal_SIGTSTP" : C_Signal.t;
val SIGTTIN = _const "Posix_Signal_SIGTTIN" : C_Signal.t;
val SIGTTOU = _const "Posix_Signal_SIGTTOU" : C_Signal.t;
val SIGURG = _const "Posix_Signal_SIGURG" : C_Signal.t;
val SIGUSR1 = _const "Posix_Signal_SIGUSR1" : C_Signal.t;
val SIGUSR2 = _const "Posix_Signal_SIGUSR2" : C_Signal.t;
val SIGVTALRM = _const "Posix_Signal_SIGVTALRM" : C_Signal.t;
val SIGXCPU = _const "Posix_Signal_SIGXCPU" : C_Signal.t;
val SIGXFSZ = _const "Posix_Signal_SIGXFSZ" : C_Signal.t;
end
structure SysDB = 
struct
val getgrgid = _import "Posix_SysDB_getgrgid" private : C_GId.t -> (C_Int.t) C_Errno.t;
val getgrnam = _import "Posix_SysDB_getgrnam" private : NullString8.t -> (C_Int.t) C_Errno.t;
val getpwnam = _import "Posix_SysDB_getpwnam" private : NullString8.t -> (C_Int.t) C_Errno.t;
val getpwuid = _import "Posix_SysDB_getpwuid" private : C_GId.t -> (C_Int.t) C_Errno.t;
structure Group = 
struct
val getGId = _import "Posix_SysDB_Group_getGId" private : unit -> C_GId.t;
val getMem = _import "Posix_SysDB_Group_getMem" private : unit -> C_StringArray.t;
val getName = _import "Posix_SysDB_Group_getName" private : unit -> C_String.t;
end
structure Passwd = 
struct
val getDir = _import "Posix_SysDB_Passwd_getDir" private : unit -> C_String.t;
val getGId = _import "Posix_SysDB_Passwd_getGId" private : unit -> C_GId.t;
val getName = _import "Posix_SysDB_Passwd_getName" private : unit -> C_String.t;
val getShell = _import "Posix_SysDB_Passwd_getShell" private : unit -> C_String.t;
val getUId = _import "Posix_SysDB_Passwd_getUId" private : unit -> C_UId.t;
end
end
structure TTY = 
struct
val B0 = _const "Posix_TTY_B0" : C_Speed.t;
val B110 = _const "Posix_TTY_B110" : C_Speed.t;
val B1200 = _const "Posix_TTY_B1200" : C_Speed.t;
val B134 = _const "Posix_TTY_B134" : C_Speed.t;
val B150 = _const "Posix_TTY_B150" : C_Speed.t;
val B1800 = _const "Posix_TTY_B1800" : C_Speed.t;
val B19200 = _const "Posix_TTY_B19200" : C_Speed.t;
val B200 = _const "Posix_TTY_B200" : C_Speed.t;
val B2400 = _const "Posix_TTY_B2400" : C_Speed.t;
val B300 = _const "Posix_TTY_B300" : C_Speed.t;
val B38400 = _const "Posix_TTY_B38400" : C_Speed.t;
val B4800 = _const "Posix_TTY_B4800" : C_Speed.t;
val B50 = _const "Posix_TTY_B50" : C_Speed.t;
val B600 = _const "Posix_TTY_B600" : C_Speed.t;
val B75 = _const "Posix_TTY_B75" : C_Speed.t;
val B9600 = _const "Posix_TTY_B9600" : C_Speed.t;
structure C = 
struct
val CLOCAL = _const "Posix_TTY_C_CLOCAL" : C_TCFlag.t;
val CREAD = _const "Posix_TTY_C_CREAD" : C_TCFlag.t;
val CS5 = _const "Posix_TTY_C_CS5" : C_TCFlag.t;
val CS6 = _const "Posix_TTY_C_CS6" : C_TCFlag.t;
val CS7 = _const "Posix_TTY_C_CS7" : C_TCFlag.t;
val CS8 = _const "Posix_TTY_C_CS8" : C_TCFlag.t;
val CSIZE = _const "Posix_TTY_C_CSIZE" : C_TCFlag.t;
val CSTOPB = _const "Posix_TTY_C_CSTOPB" : C_TCFlag.t;
val HUPCL = _const "Posix_TTY_C_HUPCL" : C_TCFlag.t;
val PARENB = _const "Posix_TTY_C_PARENB" : C_TCFlag.t;
val PARODD = _const "Posix_TTY_C_PARODD" : C_TCFlag.t;
end
structure I = 
struct
val BRKINT = _const "Posix_TTY_I_BRKINT" : C_TCFlag.t;
val ICRNL = _const "Posix_TTY_I_ICRNL" : C_TCFlag.t;
val IGNBRK = _const "Posix_TTY_I_IGNBRK" : C_TCFlag.t;
val IGNCR = _const "Posix_TTY_I_IGNCR" : C_TCFlag.t;
val IGNPAR = _const "Posix_TTY_I_IGNPAR" : C_TCFlag.t;
val INLCR = _const "Posix_TTY_I_INLCR" : C_TCFlag.t;
val INPCK = _const "Posix_TTY_I_INPCK" : C_TCFlag.t;
val ISTRIP = _const "Posix_TTY_I_ISTRIP" : C_TCFlag.t;
val IXANY = _const "Posix_TTY_I_IXANY" : C_TCFlag.t;
val IXOFF = _const "Posix_TTY_I_IXOFF" : C_TCFlag.t;
val IXON = _const "Posix_TTY_I_IXON" : C_TCFlag.t;
val PARMRK = _const "Posix_TTY_I_PARMRK" : C_TCFlag.t;
end
structure L = 
struct
val ECHO = _const "Posix_TTY_L_ECHO" : C_TCFlag.t;
val ECHOE = _const "Posix_TTY_L_ECHOE" : C_TCFlag.t;
val ECHOK = _const "Posix_TTY_L_ECHOK" : C_TCFlag.t;
val ECHONL = _const "Posix_TTY_L_ECHONL" : C_TCFlag.t;
val ICANON = _const "Posix_TTY_L_ICANON" : C_TCFlag.t;
val IEXTEN = _const "Posix_TTY_L_IEXTEN" : C_TCFlag.t;
val ISIG = _const "Posix_TTY_L_ISIG" : C_TCFlag.t;
val NOFLSH = _const "Posix_TTY_L_NOFLSH" : C_TCFlag.t;
val TOSTOP = _const "Posix_TTY_L_TOSTOP" : C_TCFlag.t;
end
structure O = 
struct
val BS0 = _const "Posix_TTY_O_BS0" : C_TCFlag.t;
val BS1 = _const "Posix_TTY_O_BS1" : C_TCFlag.t;
val BSDLY = _const "Posix_TTY_O_BSDLY" : C_TCFlag.t;
val CR0 = _const "Posix_TTY_O_CR0" : C_TCFlag.t;
val CR1 = _const "Posix_TTY_O_CR1" : C_TCFlag.t;
val CR2 = _const "Posix_TTY_O_CR2" : C_TCFlag.t;
val CR3 = _const "Posix_TTY_O_CR3" : C_TCFlag.t;
val CRDLY = _const "Posix_TTY_O_CRDLY" : C_TCFlag.t;
val FF0 = _const "Posix_TTY_O_FF0" : C_TCFlag.t;
val FF1 = _const "Posix_TTY_O_FF1" : C_TCFlag.t;
val FFDLY = _const "Posix_TTY_O_FFDLY" : C_TCFlag.t;
val NL0 = _const "Posix_TTY_O_NL0" : C_TCFlag.t;
val NL1 = _const "Posix_TTY_O_NL1" : C_TCFlag.t;
val NLDLY = _const "Posix_TTY_O_NLDLY" : C_TCFlag.t;
val OCRNL = _const "Posix_TTY_O_OCRNL" : C_TCFlag.t;
val OFILL = _const "Posix_TTY_O_OFILL" : C_TCFlag.t;
val ONLCR = _const "Posix_TTY_O_ONLCR" : C_TCFlag.t;
val ONLRET = _const "Posix_TTY_O_ONLRET" : C_TCFlag.t;
val ONOCR = _const "Posix_TTY_O_ONOCR" : C_TCFlag.t;
val OPOST = _const "Posix_TTY_O_OPOST" : C_TCFlag.t;
val TAB0 = _const "Posix_TTY_O_TAB0" : C_TCFlag.t;
val TAB1 = _const "Posix_TTY_O_TAB1" : C_TCFlag.t;
val TAB2 = _const "Posix_TTY_O_TAB2" : C_TCFlag.t;
val TAB3 = _const "Posix_TTY_O_TAB3" : C_TCFlag.t;
val TABDLY = _const "Posix_TTY_O_TABDLY" : C_TCFlag.t;
val VT0 = _const "Posix_TTY_O_VT0" : C_TCFlag.t;
val VT1 = _const "Posix_TTY_O_VT1" : C_TCFlag.t;
val VTDLY = _const "Posix_TTY_O_VTDLY" : C_TCFlag.t;
end
structure TC = 
struct
val drain = _import "Posix_TTY_TC_drain" private : C_Fd.t -> (C_Int.t) C_Errno.t;
val flow = _import "Posix_TTY_TC_flow" private : C_Fd.t * C_Int.t -> (C_Int.t) C_Errno.t;
val flush = _import "Posix_TTY_TC_flush" private : C_Fd.t * C_Int.t -> (C_Int.t) C_Errno.t;
val getattr = _import "Posix_TTY_TC_getattr" private : C_Fd.t -> (C_Int.t) C_Errno.t;
val getpgrp = _import "Posix_TTY_TC_getpgrp" private : C_Fd.t -> (C_PId.t) C_Errno.t;
val sendbreak = _import "Posix_TTY_TC_sendbreak" private : C_Fd.t * C_Int.t -> (C_Int.t) C_Errno.t;
val setattr = _import "Posix_TTY_TC_setattr" private : C_Fd.t * C_Int.t -> (C_Int.t) C_Errno.t;
val setpgrp = _import "Posix_TTY_TC_setpgrp" private : C_Fd.t * C_PId.t -> (C_Int.t) C_Errno.t;
val TCIFLUSH = _const "Posix_TTY_TC_TCIFLUSH" : C_Int.t;
val TCIOFF = _const "Posix_TTY_TC_TCIOFF" : C_Int.t;
val TCIOFLUSH = _const "Posix_TTY_TC_TCIOFLUSH" : C_Int.t;
val TCION = _const "Posix_TTY_TC_TCION" : C_Int.t;
val TCOFLUSH = _const "Posix_TTY_TC_TCOFLUSH" : C_Int.t;
val TCOOFF = _const "Posix_TTY_TC_TCOOFF" : C_Int.t;
val TCOON = _const "Posix_TTY_TC_TCOON" : C_Int.t;
val TCSADRAIN = _const "Posix_TTY_TC_TCSADRAIN" : C_Int.t;
val TCSAFLUSH = _const "Posix_TTY_TC_TCSAFLUSH" : C_Int.t;
val TCSANOW = _const "Posix_TTY_TC_TCSANOW" : C_Int.t;
end
structure Termios = 
struct
val cfGetISpeed = _import "Posix_TTY_Termios_cfGetISpeed" private : unit -> C_Speed.t;
val cfGetOSpeed = _import "Posix_TTY_Termios_cfGetOSpeed" private : unit -> C_Speed.t;
val cfSetISpeed = _import "Posix_TTY_Termios_cfSetISpeed" private : C_Speed.t -> (C_Int.t) C_Errno.t;
val cfSetOSpeed = _import "Posix_TTY_Termios_cfSetOSpeed" private : C_Speed.t -> (C_Int.t) C_Errno.t;
val getCC = _import "Posix_TTY_Termios_getCC" private : (C_CC.t) array -> unit;
val getCFlag = _import "Posix_TTY_Termios_getCFlag" private : unit -> C_TCFlag.t;
val getIFlag = _import "Posix_TTY_Termios_getIFlag" private : unit -> C_TCFlag.t;
val getLFlag = _import "Posix_TTY_Termios_getLFlag" private : unit -> C_TCFlag.t;
val getOFlag = _import "Posix_TTY_Termios_getOFlag" private : unit -> C_TCFlag.t;
val setCC = _import "Posix_TTY_Termios_setCC" private : (C_CC.t) array -> unit;
val setCFlag = _import "Posix_TTY_Termios_setCFlag" private : C_TCFlag.t -> unit;
val setIFlag = _import "Posix_TTY_Termios_setIFlag" private : C_TCFlag.t -> unit;
val setLFlag = _import "Posix_TTY_Termios_setLFlag" private : C_TCFlag.t -> unit;
val setOFlag = _import "Posix_TTY_Termios_setOFlag" private : C_TCFlag.t -> unit;
end
structure V = 
struct
val NCCS = _const "Posix_TTY_V_NCCS" : C_Int.t;
val VEOF = _const "Posix_TTY_V_VEOF" : C_Int.t;
val VEOL = _const "Posix_TTY_V_VEOL" : C_Int.t;
val VERASE = _const "Posix_TTY_V_VERASE" : C_Int.t;
val VINTR = _const "Posix_TTY_V_VINTR" : C_Int.t;
val VKILL = _const "Posix_TTY_V_VKILL" : C_Int.t;
val VMIN = _const "Posix_TTY_V_VMIN" : C_Int.t;
val VQUIT = _const "Posix_TTY_V_VQUIT" : C_Int.t;
val VSTART = _const "Posix_TTY_V_VSTART" : C_Int.t;
val VSTOP = _const "Posix_TTY_V_VSTOP" : C_Int.t;
val VSUSP = _const "Posix_TTY_V_VSUSP" : C_Int.t;
val VTIME = _const "Posix_TTY_V_VTIME" : C_Int.t;
end
end
end
structure Real32 = 
struct
type t = Real32.t
val abs = _import "Real32_abs" private : Real32.t -> Real32.t;
val add = _import "Real32_add" private : Real32.t * Real32.t -> Real32.t;
val castToWord32 = _import "Real32_castToWord32" private : Real32.t -> Word32.t;
val div = _import "Real32_div" private : Real32.t * Real32.t -> Real32.t;
val equal = _import "Real32_equal" private : Real32.t * Real32.t -> Bool.t;
val fetch = _import "Real32_fetch" private : (Real32.t) ref -> Real32.t;
val frexp = _import "Real32_frexp" private : Real32.t * (C_Int.t) ref -> Real32.t;
val gdtoa = _import "Real32_gdtoa" private : Real32.t * C_Int.t * C_Int.t * C_Int.t * (C_Int.t) ref -> C_String.t;
val ldexp = _import "Real32_ldexp" private : Real32.t * C_Int.t -> Real32.t;
val le = _import "Real32_le" private : Real32.t * Real32.t -> Bool.t;
val lt = _import "Real32_lt" private : Real32.t * Real32.t -> Bool.t;
structure Math = 
struct
val acos = _import "Real32_Math_acos" private : Real32.t -> Real32.t;
val asin = _import "Real32_Math_asin" private : Real32.t -> Real32.t;
val atan = _import "Real32_Math_atan" private : Real32.t -> Real32.t;
val atan2 = _import "Real32_Math_atan2" private : Real32.t * Real32.t -> Real32.t;
val cos = _import "Real32_Math_cos" private : Real32.t -> Real32.t;
val cosh = _import "Real32_Math_cosh" private : Real32.t -> Real32.t;
val (eGet, eSet) = _symbol "Real32_Math_e" private : (unit -> (Real32.t)) * ((Real32.t) -> unit);
val exp = _import "Real32_Math_exp" private : Real32.t -> Real32.t;
val ln = _import "Real32_Math_ln" private : Real32.t -> Real32.t;
val log10 = _import "Real32_Math_log10" private : Real32.t -> Real32.t;
val (piGet, piSet) = _symbol "Real32_Math_pi" private : (unit -> (Real32.t)) * ((Real32.t) -> unit);
val pow = _import "Real32_Math_pow" private : Real32.t * Real32.t -> Real32.t;
val sin = _import "Real32_Math_sin" private : Real32.t -> Real32.t;
val sinh = _import "Real32_Math_sinh" private : Real32.t -> Real32.t;
val sqrt = _import "Real32_Math_sqrt" private : Real32.t -> Real32.t;
val tan = _import "Real32_Math_tan" private : Real32.t -> Real32.t;
val tanh = _import "Real32_Math_tanh" private : Real32.t -> Real32.t;
end
val modf = _import "Real32_modf" private : Real32.t * (Real32.t) ref -> Real32.t;
val move = _import "Real32_move" private : (Real32.t) ref * (Real32.t) ref -> unit;
val mul = _import "Real32_mul" private : Real32.t * Real32.t -> Real32.t;
val muladd = _import "Real32_muladd" private : Real32.t * Real32.t * Real32.t -> Real32.t;
val mulsub = _import "Real32_mulsub" private : Real32.t * Real32.t * Real32.t -> Real32.t;
val neg = _import "Real32_neg" private : Real32.t -> Real32.t;
val realCeil = _import "Real32_realCeil" private : Real32.t -> Real32.t;
val realFloor = _import "Real32_realFloor" private : Real32.t -> Real32.t;
val realTrunc = _import "Real32_realTrunc" private : Real32.t -> Real32.t;
val rndToReal32 = _import "Real32_rndToReal32" private : Real32.t -> Real32.t;
val rndToReal64 = _import "Real32_rndToReal64" private : Real32.t -> Real64.t;
val rndToWordS16 = _import "Real32_rndToWordS16" private : Real32.t -> Int16.t;
val rndToWordS32 = _import "Real32_rndToWordS32" private : Real32.t -> Int32.t;
val rndToWordS64 = _import "Real32_rndToWordS64" private : Real32.t -> Int64.t;
val rndToWordS8 = _import "Real32_rndToWordS8" private : Real32.t -> Int8.t;
val rndToWordU16 = _import "Real32_rndToWordU16" private : Real32.t -> Word16.t;
val rndToWordU32 = _import "Real32_rndToWordU32" private : Real32.t -> Word32.t;
val rndToWordU64 = _import "Real32_rndToWordU64" private : Real32.t -> Word64.t;
val rndToWordU8 = _import "Real32_rndToWordU8" private : Real32.t -> Word8.t;
val round = _import "Real32_round" private : Real32.t -> Real32.t;
val store = _import "Real32_store" private : (Real32.t) ref * Real32.t -> unit;
val strtor = _import "Real32_strtor" private : NullString8.t * C_Int.t -> Real32.t;
val sub = _import "Real32_sub" private : Real32.t * Real32.t -> Real32.t;
end
structure Real64 = 
struct
type t = Real64.t
val abs = _import "Real64_abs" private : Real64.t -> Real64.t;
val add = _import "Real64_add" private : Real64.t * Real64.t -> Real64.t;
val castToWord64 = _import "Real64_castToWord64" private : Real64.t -> Word64.t;
val div = _import "Real64_div" private : Real64.t * Real64.t -> Real64.t;
val equal = _import "Real64_equal" private : Real64.t * Real64.t -> Bool.t;
val fetch = _import "Real64_fetch" private : (Real64.t) ref -> Real64.t;
val frexp = _import "Real64_frexp" private : Real64.t * (C_Int.t) ref -> Real64.t;
val gdtoa = _import "Real64_gdtoa" private : Real64.t * C_Int.t * C_Int.t * C_Int.t * (C_Int.t) ref -> C_String.t;
val ldexp = _import "Real64_ldexp" private : Real64.t * C_Int.t -> Real64.t;
val le = _import "Real64_le" private : Real64.t * Real64.t -> Bool.t;
val lt = _import "Real64_lt" private : Real64.t * Real64.t -> Bool.t;
structure Math = 
struct
val acos = _import "Real64_Math_acos" private : Real64.t -> Real64.t;
val asin = _import "Real64_Math_asin" private : Real64.t -> Real64.t;
val atan = _import "Real64_Math_atan" private : Real64.t -> Real64.t;
val atan2 = _import "Real64_Math_atan2" private : Real64.t * Real64.t -> Real64.t;
val cos = _import "Real64_Math_cos" private : Real64.t -> Real64.t;
val cosh = _import "Real64_Math_cosh" private : Real64.t -> Real64.t;
val (eGet, eSet) = _symbol "Real64_Math_e" private : (unit -> (Real64.t)) * ((Real64.t) -> unit);
val exp = _import "Real64_Math_exp" private : Real64.t -> Real64.t;
val ln = _import "Real64_Math_ln" private : Real64.t -> Real64.t;
val log10 = _import "Real64_Math_log10" private : Real64.t -> Real64.t;
val (piGet, piSet) = _symbol "Real64_Math_pi" private : (unit -> (Real64.t)) * ((Real64.t) -> unit);
val pow = _import "Real64_Math_pow" private : Real64.t * Real64.t -> Real64.t;
val sin = _import "Real64_Math_sin" private : Real64.t -> Real64.t;
val sinh = _import "Real64_Math_sinh" private : Real64.t -> Real64.t;
val sqrt = _import "Real64_Math_sqrt" private : Real64.t -> Real64.t;
val tan = _import "Real64_Math_tan" private : Real64.t -> Real64.t;
val tanh = _import "Real64_Math_tanh" private : Real64.t -> Real64.t;
end
val modf = _import "Real64_modf" private : Real64.t * (Real64.t) ref -> Real64.t;
val move = _import "Real64_move" private : (Real64.t) ref * (Real64.t) ref -> unit;
val mul = _import "Real64_mul" private : Real64.t * Real64.t -> Real64.t;
val muladd = _import "Real64_muladd" private : Real64.t * Real64.t * Real64.t -> Real64.t;
val mulsub = _import "Real64_mulsub" private : Real64.t * Real64.t * Real64.t -> Real64.t;
val neg = _import "Real64_neg" private : Real64.t -> Real64.t;
val realCeil = _import "Real64_realCeil" private : Real64.t -> Real64.t;
val realFloor = _import "Real64_realFloor" private : Real64.t -> Real64.t;
val realTrunc = _import "Real64_realTrunc" private : Real64.t -> Real64.t;
val rndToReal32 = _import "Real64_rndToReal32" private : Real64.t -> Real32.t;
val rndToReal64 = _import "Real64_rndToReal64" private : Real64.t -> Real64.t;
val rndToWordS16 = _import "Real64_rndToWordS16" private : Real64.t -> Int16.t;
val rndToWordS32 = _import "Real64_rndToWordS32" private : Real64.t -> Int32.t;
val rndToWordS64 = _import "Real64_rndToWordS64" private : Real64.t -> Int64.t;
val rndToWordS8 = _import "Real64_rndToWordS8" private : Real64.t -> Int8.t;
val rndToWordU16 = _import "Real64_rndToWordU16" private : Real64.t -> Word16.t;
val rndToWordU32 = _import "Real64_rndToWordU32" private : Real64.t -> Word32.t;
val rndToWordU64 = _import "Real64_rndToWordU64" private : Real64.t -> Word64.t;
val rndToWordU8 = _import "Real64_rndToWordU8" private : Real64.t -> Word8.t;
val round = _import "Real64_round" private : Real64.t -> Real64.t;
val store = _import "Real64_store" private : (Real64.t) ref * Real64.t -> unit;
val strtor = _import "Real64_strtor" private : NullString8.t * C_Int.t -> Real64.t;
val sub = _import "Real64_sub" private : Real64.t * Real64.t -> Real64.t;
end
structure Socket = 
struct
val accept = _import "Socket_accept" private : C_Sock.t * (Word8.t) array * (C_Socklen.t) ref -> (C_Int.t) C_Errno.t;
structure AF = 
struct
val INET = _const "Socket_AF_INET" : C_Int.t;
val INET6 = _const "Socket_AF_INET6" : C_Int.t;
val UNIX = _const "Socket_AF_UNIX" : C_Int.t;
val UNSPEC = _const "Socket_AF_UNSPEC" : C_Int.t;
end
val bind = _import "Socket_bind" private : C_Sock.t * (Word8.t) vector * C_Socklen.t -> (C_Int.t) C_Errno.t;
val close = _import "Socket_close" private : C_Sock.t -> (C_Int.t) C_Errno.t;
val connect = _import "Socket_connect" private : C_Sock.t * (Word8.t) vector * C_Socklen.t -> (C_Int.t) C_Errno.t;
structure Ctl = 
struct
val getATMARK = _import "Socket_Ctl_getATMARK" private : C_Sock.t * (C_Int.t) ref -> (C_Int.t) C_Errno.t;
val getNREAD = _import "Socket_Ctl_getNREAD" private : C_Sock.t * (C_Int.t) ref -> (C_Int.t) C_Errno.t;
val getPeerName = _import "Socket_Ctl_getPeerName" private : C_Sock.t * (Word8.t) array * (C_Socklen.t) ref -> (C_Int.t) C_Errno.t;
val getSockName = _import "Socket_Ctl_getSockName" private : C_Sock.t * (Word8.t) array * (C_Socklen.t) ref -> (C_Int.t) C_Errno.t;
val getSockOptC_Int = _import "Socket_Ctl_getSockOptC_Int" private : C_Sock.t * C_Int.t * C_Int.t * (C_Int.t) ref -> (C_Int.t) C_Errno.t;
val getSockOptC_Linger = _import "Socket_Ctl_getSockOptC_Linger" private : C_Sock.t * C_Int.t * C_Int.t * (C_Int.t) ref * (C_Int.t) ref -> (C_Int.t) C_Errno.t;
val setSockOptC_Int = _import "Socket_Ctl_setSockOptC_Int" private : C_Sock.t * C_Int.t * C_Int.t * C_Int.t -> (C_Int.t) C_Errno.t;
val setSockOptC_Linger = _import "Socket_Ctl_setSockOptC_Linger" private : C_Sock.t * C_Int.t * C_Int.t * C_Int.t * C_Int.t -> (C_Int.t) C_Errno.t;
val SO_ACCEPTCONN = _const "Socket_Ctl_SO_ACCEPTCONN" : C_Int.t;
val SO_BROADCAST = _const "Socket_Ctl_SO_BROADCAST" : C_Int.t;
val SO_DEBUG = _const "Socket_Ctl_SO_DEBUG" : C_Int.t;
val SO_DONTROUTE = _const "Socket_Ctl_SO_DONTROUTE" : C_Int.t;
val SO_ERROR = _const "Socket_Ctl_SO_ERROR" : C_Int.t;
val SO_KEEPALIVE = _const "Socket_Ctl_SO_KEEPALIVE" : C_Int.t;
val SO_LINGER = _const "Socket_Ctl_SO_LINGER" : C_Int.t;
val SO_OOBINLINE = _const "Socket_Ctl_SO_OOBINLINE" : C_Int.t;
val SO_RCVBUF = _const "Socket_Ctl_SO_RCVBUF" : C_Int.t;
val SO_RCVLOWAT = _const "Socket_Ctl_SO_RCVLOWAT" : C_Int.t;
val SO_RCVTIMEO = _const "Socket_Ctl_SO_RCVTIMEO" : C_Int.t;
val SO_REUSEADDR = _const "Socket_Ctl_SO_REUSEADDR" : C_Int.t;
val SO_SNDBUF = _const "Socket_Ctl_SO_SNDBUF" : C_Int.t;
val SO_SNDLOWAT = _const "Socket_Ctl_SO_SNDLOWAT" : C_Int.t;
val SO_SNDTIMEO = _const "Socket_Ctl_SO_SNDTIMEO" : C_Int.t;
val SO_TYPE = _const "Socket_Ctl_SO_TYPE" : C_Int.t;
val SOL_SOCKET = _const "Socket_Ctl_SOL_SOCKET" : C_Int.t;
end
val familyOfAddr = _import "Socket_familyOfAddr" private : (Word8.t) vector -> C_Int.t;
structure GenericSock = 
struct
val socket = _import "Socket_GenericSock_socket" private : C_Int.t * C_Int.t * C_Int.t -> (C_Int.t) C_Errno.t;
val socketPair = _import "Socket_GenericSock_socketPair" private : C_Int.t * C_Int.t * C_Int.t * (C_Int.t) array -> (C_Int.t) C_Errno.t;
end
val getTimeout_sec = _import "Socket_getTimeout_sec" private : unit -> C_Time.t;
val getTimeout_usec = _import "Socket_getTimeout_usec" private : unit -> C_SUSeconds.t;
structure INetSock = 
struct
structure Ctl = 
struct
val IPPROTO_TCP = _const "Socket_INetSock_Ctl_IPPROTO_TCP" : C_Int.t;
val TCP_NODELAY = _const "Socket_INetSock_Ctl_TCP_NODELAY" : C_Int.t;
end
val fromAddr = _import "Socket_INetSock_fromAddr" private : (Word8.t) vector -> unit;
val getInAddr = _import "Socket_INetSock_getInAddr" private : (Word8.t) array -> unit;
val getPort = _import "Socket_INetSock_getPort" private : unit -> Word16.t;
val toAddr = _import "Socket_INetSock_toAddr" private : (Word8.t) vector * Word16.t * (Word8.t) array * (C_Socklen.t) ref -> unit;
end
val listen = _import "Socket_listen" private : C_Sock.t * C_Int.t -> (C_Int.t) C_Errno.t;
val MSG_CTRUNC = _const "Socket_MSG_CTRUNC" : C_Int.t;
val MSG_DONTROUTE = _const "Socket_MSG_DONTROUTE" : C_Int.t;
val MSG_DONTWAIT = _const "Socket_MSG_DONTWAIT" : C_Int.t;
val MSG_EOR = _const "Socket_MSG_EOR" : C_Int.t;
val MSG_OOB = _const "Socket_MSG_OOB" : C_Int.t;
val MSG_PEEK = _const "Socket_MSG_PEEK" : C_Int.t;
val MSG_TRUNC = _const "Socket_MSG_TRUNC" : C_Int.t;
val MSG_WAITALL = _const "Socket_MSG_WAITALL" : C_Int.t;
val recv = _import "Socket_recv" private : C_Sock.t * (Word8.t) array * C_Int.t * C_Size.t * C_Int.t -> (C_SSize.t) C_Errno.t;
val recvFrom = _import "Socket_recvFrom" private : C_Sock.t * (Word8.t) array * C_Int.t * C_Size.t * C_Int.t * (Word8.t) array * (C_Socklen.t) ref -> (C_SSize.t) C_Errno.t;
val select = _import "Socket_select" private : (C_Fd.t) vector * (C_Fd.t) vector * (C_Fd.t) vector * (C_Int.t) array * (C_Int.t) array * (C_Int.t) array -> (C_Int.t) C_Errno.t;
val sendArr = _import "Socket_sendArr" private : C_Sock.t * (Word8.t) array * C_Int.t * C_Size.t * C_Int.t -> (C_SSize.t) C_Errno.t;
val sendArrTo = _import "Socket_sendArrTo" private : C_Sock.t * (Word8.t) array * C_Int.t * C_Size.t * C_Int.t * (Word8.t) vector * C_Socklen.t -> (C_SSize.t) C_Errno.t;
val sendVec = _import "Socket_sendVec" private : C_Sock.t * (Word8.t) vector * C_Int.t * C_Size.t * C_Int.t -> (C_SSize.t) C_Errno.t;
val sendVecTo = _import "Socket_sendVecTo" private : C_Sock.t * (Word8.t) vector * C_Int.t * C_Size.t * C_Int.t * (Word8.t) vector * C_Socklen.t -> (C_SSize.t) C_Errno.t;
val setTimeout = _import "Socket_setTimeout" private : C_Time.t * C_SUSeconds.t -> unit;
val setTimeoutNull = _import "Socket_setTimeoutNull" private : unit -> unit;
val SHUT_RD = _const "Socket_SHUT_RD" : C_Int.t;
val SHUT_RDWR = _const "Socket_SHUT_RDWR" : C_Int.t;
val SHUT_WR = _const "Socket_SHUT_WR" : C_Int.t;
val shutdown = _import "Socket_shutdown" private : C_Sock.t * C_Int.t -> (C_Int.t) C_Errno.t;
structure SOCK = 
struct
val DGRAM = _const "Socket_SOCK_DGRAM" : C_Int.t;
val RAW = _const "Socket_SOCK_RAW" : C_Int.t;
val SEQPACKET = _const "Socket_SOCK_SEQPACKET" : C_Int.t;
val STREAM = _const "Socket_SOCK_STREAM" : C_Int.t;
end
val sockAddrStorageLen = _const "Socket_sockAddrStorageLen" : C_Size.t;
structure UnixSock = 
struct
val fromAddr = _import "Socket_UnixSock_fromAddr" private : (Word8.t) vector * (Char8.t) array * C_Size.t -> unit;
val pathLen = _import "Socket_UnixSock_pathLen" private : (Word8.t) vector -> C_Size.t;
val toAddr = _import "Socket_UnixSock_toAddr" private : NullString8.t * C_Size.t * (Word8.t) array * (C_Socklen.t) ref -> unit;
end
end
structure Stdio = 
struct
val print = _import "Stdio_print" private : String8.t -> unit;
val printStderr = _import "Stdio_printStderr" private : String8.t -> unit;
val printStdout = _import "Stdio_printStdout" private : String8.t -> unit;
end
structure Time = 
struct
val getTimeOfDay = _import "Time_getTimeOfDay" private : (C_Time.t) ref * (C_SUSeconds.t) ref -> C_Int.t;
end
structure Windows = 
struct
structure Process = 
struct
val create = _import "Windows_Process_create" private : NullString8.t * NullString8.t * NullString8.t * C_Fd.t * C_Fd.t * C_Fd.t -> (C_PId.t) C_Errno.t;
val createNull = _import "Windows_Process_createNull" private : NullString8.t * NullString8.t * C_Fd.t * C_Fd.t * C_Fd.t -> (C_PId.t) C_Errno.t;
val getexitcode = _import "Windows_Process_getexitcode" private : C_PId.t * (C_Status.t) ref -> (C_Int.t) C_Errno.t;
val terminate = _import "Windows_Process_terminate" private : C_PId.t * C_Signal.t -> (C_Int.t) C_Errno.t;
end
end
structure Word16 = 
struct
type t = Word16.t
val add = _import "Word16_add" private : Word16.t * Word16.t -> Word16.t;
val andb = _import "Word16_andb" private : Word16.t * Word16.t -> Word16.t;
val equal = _import "Word16_equal" private : Word16.t * Word16.t -> Bool.t;
val lshift = _import "Word16_lshift" private : Word16.t * Word32.t -> Word16.t;
val neg = _import "Word16_neg" private : Word16.t -> Word16.t;
val notb = _import "Word16_notb" private : Word16.t -> Word16.t;
val orb = _import "Word16_orb" private : Word16.t * Word16.t -> Word16.t;
val rol = _import "Word16_rol" private : Word16.t * Word32.t -> Word16.t;
val ror = _import "Word16_ror" private : Word16.t * Word32.t -> Word16.t;
val sub = _import "Word16_sub" private : Word16.t * Word16.t -> Word16.t;
val xorb = _import "Word16_xorb" private : Word16.t * Word16.t -> Word16.t;
end
structure Word32 = 
struct
type t = Word32.t
val add = _import "Word32_add" private : Word32.t * Word32.t -> Word32.t;
val andb = _import "Word32_andb" private : Word32.t * Word32.t -> Word32.t;
val castToReal32 = _import "Word32_castToReal32" private : Word32.t -> Real32.t;
val equal = _import "Word32_equal" private : Word32.t * Word32.t -> Bool.t;
val lshift = _import "Word32_lshift" private : Word32.t * Word32.t -> Word32.t;
val neg = _import "Word32_neg" private : Word32.t -> Word32.t;
val notb = _import "Word32_notb" private : Word32.t -> Word32.t;
val orb = _import "Word32_orb" private : Word32.t * Word32.t -> Word32.t;
val rol = _import "Word32_rol" private : Word32.t * Word32.t -> Word32.t;
val ror = _import "Word32_ror" private : Word32.t * Word32.t -> Word32.t;
val sub = _import "Word32_sub" private : Word32.t * Word32.t -> Word32.t;
val xorb = _import "Word32_xorb" private : Word32.t * Word32.t -> Word32.t;
end
structure Word64 = 
struct
type t = Word64.t
val add = _import "Word64_add" private : Word64.t * Word64.t -> Word64.t;
val andb = _import "Word64_andb" private : Word64.t * Word64.t -> Word64.t;
val castToReal64 = _import "Word64_castToReal64" private : Word64.t -> Real64.t;
val equal = _import "Word64_equal" private : Word64.t * Word64.t -> Bool.t;
val fetch = _import "Word64_fetch" private : (Word64.t) ref -> Word64.t;
val lshift = _import "Word64_lshift" private : Word64.t * Word32.t -> Word64.t;
val move = _import "Word64_move" private : (Word64.t) ref * (Word64.t) ref -> unit;
val neg = _import "Word64_neg" private : Word64.t -> Word64.t;
val notb = _import "Word64_notb" private : Word64.t -> Word64.t;
val orb = _import "Word64_orb" private : Word64.t * Word64.t -> Word64.t;
val rol = _import "Word64_rol" private : Word64.t * Word32.t -> Word64.t;
val ror = _import "Word64_ror" private : Word64.t * Word32.t -> Word64.t;
val store = _import "Word64_store" private : (Word64.t) ref * Word64.t -> unit;
val sub = _import "Word64_sub" private : Word64.t * Word64.t -> Word64.t;
val xorb = _import "Word64_xorb" private : Word64.t * Word64.t -> Word64.t;
end
structure Word8 = 
struct
type t = Word8.t
val add = _import "Word8_add" private : Word8.t * Word8.t -> Word8.t;
val andb = _import "Word8_andb" private : Word8.t * Word8.t -> Word8.t;
val equal = _import "Word8_equal" private : Word8.t * Word8.t -> Bool.t;
val lshift = _import "Word8_lshift" private : Word8.t * Word32.t -> Word8.t;
val neg = _import "Word8_neg" private : Word8.t -> Word8.t;
val notb = _import "Word8_notb" private : Word8.t -> Word8.t;
val orb = _import "Word8_orb" private : Word8.t * Word8.t -> Word8.t;
val rol = _import "Word8_rol" private : Word8.t * Word32.t -> Word8.t;
val ror = _import "Word8_ror" private : Word8.t * Word32.t -> Word8.t;
val sub = _import "Word8_sub" private : Word8.t * Word8.t -> Word8.t;
val xorb = _import "Word8_xorb" private : Word8.t * Word8.t -> Word8.t;
end
structure WordS16 = 
struct
val addCheckOverflows = _import "WordS16_addCheckOverflows" private : Int16.t * Int16.t -> Bool.t;
val extdToWord16 = _import "WordS16_extdToWord16" private : Int16.t -> Word16.t;
val extdToWord32 = _import "WordS16_extdToWord32" private : Int16.t -> Word32.t;
val extdToWord64 = _import "WordS16_extdToWord64" private : Int16.t -> Word64.t;
val extdToWord8 = _import "WordS16_extdToWord8" private : Int16.t -> Word8.t;
val ge = _import "WordS16_ge" private : Int16.t * Int16.t -> Bool.t;
val gt = _import "WordS16_gt" private : Int16.t * Int16.t -> Bool.t;
val le = _import "WordS16_le" private : Int16.t * Int16.t -> Bool.t;
val lt = _import "WordS16_lt" private : Int16.t * Int16.t -> Bool.t;
val mul = _import "WordS16_mul" private : Int16.t * Int16.t -> Int16.t;
val mulCheckOverflows = _import "WordS16_mulCheckOverflows" private : Int16.t * Int16.t -> Bool.t;
val negCheckOverflows = _import "WordS16_negCheckOverflows" private : Int16.t -> Bool.t;
val quot = _import "WordS16_quot" private : Int16.t * Int16.t -> Int16.t;
val rem = _import "WordS16_rem" private : Int16.t * Int16.t -> Int16.t;
val rndToReal32 = _import "WordS16_rndToReal32" private : Int16.t -> Real32.t;
val rndToReal64 = _import "WordS16_rndToReal64" private : Int16.t -> Real64.t;
val rshift = _import "WordS16_rshift" private : Int16.t * Word32.t -> Int16.t;
val subCheckOverflows = _import "WordS16_subCheckOverflows" private : Int16.t * Int16.t -> Bool.t;
end
structure WordS32 = 
struct
val addCheckOverflows = _import "WordS32_addCheckOverflows" private : Int32.t * Int32.t -> Bool.t;
val extdToWord16 = _import "WordS32_extdToWord16" private : Int32.t -> Word16.t;
val extdToWord32 = _import "WordS32_extdToWord32" private : Int32.t -> Word32.t;
val extdToWord64 = _import "WordS32_extdToWord64" private : Int32.t -> Word64.t;
val extdToWord8 = _import "WordS32_extdToWord8" private : Int32.t -> Word8.t;
val ge = _import "WordS32_ge" private : Int32.t * Int32.t -> Bool.t;
val gt = _import "WordS32_gt" private : Int32.t * Int32.t -> Bool.t;
val le = _import "WordS32_le" private : Int32.t * Int32.t -> Bool.t;
val lt = _import "WordS32_lt" private : Int32.t * Int32.t -> Bool.t;
val mul = _import "WordS32_mul" private : Int32.t * Int32.t -> Int32.t;
val mulCheckOverflows = _import "WordS32_mulCheckOverflows" private : Int32.t * Int32.t -> Bool.t;
val negCheckOverflows = _import "WordS32_negCheckOverflows" private : Int32.t -> Bool.t;
val quot = _import "WordS32_quot" private : Int32.t * Int32.t -> Int32.t;
val rem = _import "WordS32_rem" private : Int32.t * Int32.t -> Int32.t;
val rndToReal32 = _import "WordS32_rndToReal32" private : Int32.t -> Real32.t;
val rndToReal64 = _import "WordS32_rndToReal64" private : Int32.t -> Real64.t;
val rshift = _import "WordS32_rshift" private : Int32.t * Word32.t -> Int32.t;
val subCheckOverflows = _import "WordS32_subCheckOverflows" private : Int32.t * Int32.t -> Bool.t;
end
structure WordS64 = 
struct
val addCheckOverflows = _import "WordS64_addCheckOverflows" private : Int64.t * Int64.t -> Bool.t;
val extdToWord16 = _import "WordS64_extdToWord16" private : Int64.t -> Word16.t;
val extdToWord32 = _import "WordS64_extdToWord32" private : Int64.t -> Word32.t;
val extdToWord64 = _import "WordS64_extdToWord64" private : Int64.t -> Word64.t;
val extdToWord8 = _import "WordS64_extdToWord8" private : Int64.t -> Word8.t;
val ge = _import "WordS64_ge" private : Int64.t * Int64.t -> Bool.t;
val gt = _import "WordS64_gt" private : Int64.t * Int64.t -> Bool.t;
val le = _import "WordS64_le" private : Int64.t * Int64.t -> Bool.t;
val lt = _import "WordS64_lt" private : Int64.t * Int64.t -> Bool.t;
val mul = _import "WordS64_mul" private : Int64.t * Int64.t -> Int64.t;
val mulCheckOverflows = _import "WordS64_mulCheckOverflows" private : Int64.t * Int64.t -> Bool.t;
val negCheckOverflows = _import "WordS64_negCheckOverflows" private : Int64.t -> Bool.t;
val quot = _import "WordS64_quot" private : Int64.t * Int64.t -> Int64.t;
val rem = _import "WordS64_rem" private : Int64.t * Int64.t -> Int64.t;
val rndToReal32 = _import "WordS64_rndToReal32" private : Int64.t -> Real32.t;
val rndToReal64 = _import "WordS64_rndToReal64" private : Int64.t -> Real64.t;
val rshift = _import "WordS64_rshift" private : Int64.t * Word32.t -> Int64.t;
val subCheckOverflows = _import "WordS64_subCheckOverflows" private : Int64.t * Int64.t -> Bool.t;
end
structure WordS8 = 
struct
val addCheckOverflows = _import "WordS8_addCheckOverflows" private : Int8.t * Int8.t -> Bool.t;
val extdToWord16 = _import "WordS8_extdToWord16" private : Int8.t -> Word16.t;
val extdToWord32 = _import "WordS8_extdToWord32" private : Int8.t -> Word32.t;
val extdToWord64 = _import "WordS8_extdToWord64" private : Int8.t -> Word64.t;
val extdToWord8 = _import "WordS8_extdToWord8" private : Int8.t -> Word8.t;
val ge = _import "WordS8_ge" private : Int8.t * Int8.t -> Bool.t;
val gt = _import "WordS8_gt" private : Int8.t * Int8.t -> Bool.t;
val le = _import "WordS8_le" private : Int8.t * Int8.t -> Bool.t;
val lt = _import "WordS8_lt" private : Int8.t * Int8.t -> Bool.t;
val mul = _import "WordS8_mul" private : Int8.t * Int8.t -> Int8.t;
val mulCheckOverflows = _import "WordS8_mulCheckOverflows" private : Int8.t * Int8.t -> Bool.t;
val negCheckOverflows = _import "WordS8_negCheckOverflows" private : Int8.t -> Bool.t;
val quot = _import "WordS8_quot" private : Int8.t * Int8.t -> Int8.t;
val rem = _import "WordS8_rem" private : Int8.t * Int8.t -> Int8.t;
val rndToReal32 = _import "WordS8_rndToReal32" private : Int8.t -> Real32.t;
val rndToReal64 = _import "WordS8_rndToReal64" private : Int8.t -> Real64.t;
val rshift = _import "WordS8_rshift" private : Int8.t * Word32.t -> Int8.t;
val subCheckOverflows = _import "WordS8_subCheckOverflows" private : Int8.t * Int8.t -> Bool.t;
end
structure WordU16 = 
struct
val addCheckOverflows = _import "WordU16_addCheckOverflows" private : Word16.t * Word16.t -> Bool.t;
val extdToWord16 = _import "WordU16_extdToWord16" private : Word16.t -> Word16.t;
val extdToWord32 = _import "WordU16_extdToWord32" private : Word16.t -> Word32.t;
val extdToWord64 = _import "WordU16_extdToWord64" private : Word16.t -> Word64.t;
val extdToWord8 = _import "WordU16_extdToWord8" private : Word16.t -> Word8.t;
val ge = _import "WordU16_ge" private : Word16.t * Word16.t -> Bool.t;
val gt = _import "WordU16_gt" private : Word16.t * Word16.t -> Bool.t;
val le = _import "WordU16_le" private : Word16.t * Word16.t -> Bool.t;
val lt = _import "WordU16_lt" private : Word16.t * Word16.t -> Bool.t;
val mul = _import "WordU16_mul" private : Word16.t * Word16.t -> Word16.t;
val mulCheckOverflows = _import "WordU16_mulCheckOverflows" private : Word16.t * Word16.t -> Bool.t;
val quot = _import "WordU16_quot" private : Word16.t * Word16.t -> Word16.t;
val rem = _import "WordU16_rem" private : Word16.t * Word16.t -> Word16.t;
val rndToReal32 = _import "WordU16_rndToReal32" private : Word16.t -> Real32.t;
val rndToReal64 = _import "WordU16_rndToReal64" private : Word16.t -> Real64.t;
val rshift = _import "WordU16_rshift" private : Word16.t * Word32.t -> Word16.t;
end
structure WordU32 = 
struct
val addCheckOverflows = _import "WordU32_addCheckOverflows" private : Word32.t * Word32.t -> Bool.t;
val extdToWord16 = _import "WordU32_extdToWord16" private : Word32.t -> Word16.t;
val extdToWord32 = _import "WordU32_extdToWord32" private : Word32.t -> Word32.t;
val extdToWord64 = _import "WordU32_extdToWord64" private : Word32.t -> Word64.t;
val extdToWord8 = _import "WordU32_extdToWord8" private : Word32.t -> Word8.t;
val ge = _import "WordU32_ge" private : Word32.t * Word32.t -> Bool.t;
val gt = _import "WordU32_gt" private : Word32.t * Word32.t -> Bool.t;
val le = _import "WordU32_le" private : Word32.t * Word32.t -> Bool.t;
val lt = _import "WordU32_lt" private : Word32.t * Word32.t -> Bool.t;
val mul = _import "WordU32_mul" private : Word32.t * Word32.t -> Word32.t;
val mulCheckOverflows = _import "WordU32_mulCheckOverflows" private : Word32.t * Word32.t -> Bool.t;
val quot = _import "WordU32_quot" private : Word32.t * Word32.t -> Word32.t;
val rem = _import "WordU32_rem" private : Word32.t * Word32.t -> Word32.t;
val rndToReal32 = _import "WordU32_rndToReal32" private : Word32.t -> Real32.t;
val rndToReal64 = _import "WordU32_rndToReal64" private : Word32.t -> Real64.t;
val rshift = _import "WordU32_rshift" private : Word32.t * Word32.t -> Word32.t;
end
structure WordU64 = 
struct
val addCheckOverflows = _import "WordU64_addCheckOverflows" private : Word64.t * Word64.t -> Bool.t;
val extdToWord16 = _import "WordU64_extdToWord16" private : Word64.t -> Word16.t;
val extdToWord32 = _import "WordU64_extdToWord32" private : Word64.t -> Word32.t;
val extdToWord64 = _import "WordU64_extdToWord64" private : Word64.t -> Word64.t;
val extdToWord8 = _import "WordU64_extdToWord8" private : Word64.t -> Word8.t;
val ge = _import "WordU64_ge" private : Word64.t * Word64.t -> Bool.t;
val gt = _import "WordU64_gt" private : Word64.t * Word64.t -> Bool.t;
val le = _import "WordU64_le" private : Word64.t * Word64.t -> Bool.t;
val lt = _import "WordU64_lt" private : Word64.t * Word64.t -> Bool.t;
val mul = _import "WordU64_mul" private : Word64.t * Word64.t -> Word64.t;
val mulCheckOverflows = _import "WordU64_mulCheckOverflows" private : Word64.t * Word64.t -> Bool.t;
val quot = _import "WordU64_quot" private : Word64.t * Word64.t -> Word64.t;
val rem = _import "WordU64_rem" private : Word64.t * Word64.t -> Word64.t;
val rndToReal32 = _import "WordU64_rndToReal32" private : Word64.t -> Real32.t;
val rndToReal64 = _import "WordU64_rndToReal64" private : Word64.t -> Real64.t;
val rshift = _import "WordU64_rshift" private : Word64.t * Word32.t -> Word64.t;
end
structure WordU8 = 
struct
val addCheckOverflows = _import "WordU8_addCheckOverflows" private : Word8.t * Word8.t -> Bool.t;
val extdToWord16 = _import "WordU8_extdToWord16" private : Word8.t -> Word16.t;
val extdToWord32 = _import "WordU8_extdToWord32" private : Word8.t -> Word32.t;
val extdToWord64 = _import "WordU8_extdToWord64" private : Word8.t -> Word64.t;
val extdToWord8 = _import "WordU8_extdToWord8" private : Word8.t -> Word8.t;
val ge = _import "WordU8_ge" private : Word8.t * Word8.t -> Bool.t;
val gt = _import "WordU8_gt" private : Word8.t * Word8.t -> Bool.t;
val le = _import "WordU8_le" private : Word8.t * Word8.t -> Bool.t;
val lt = _import "WordU8_lt" private : Word8.t * Word8.t -> Bool.t;
val mul = _import "WordU8_mul" private : Word8.t * Word8.t -> Word8.t;
val mulCheckOverflows = _import "WordU8_mulCheckOverflows" private : Word8.t * Word8.t -> Bool.t;
val quot = _import "WordU8_quot" private : Word8.t * Word8.t -> Word8.t;
val rem = _import "WordU8_rem" private : Word8.t * Word8.t -> Word8.t;
val rndToReal32 = _import "WordU8_rndToReal32" private : Word8.t -> Real32.t;
val rndToReal64 = _import "WordU8_rndToReal64" private : Word8.t -> Real64.t;
val rshift = _import "WordU8_rshift" private : Word8.t * Word32.t -> Word8.t;
end
end
end
