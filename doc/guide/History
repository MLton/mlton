<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta name="robots" content="index,nofollow">



<title>History - MLton Standard ML Compiler (SML Compiler)</title>
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="all" href="common.css">
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="screen" href="screen.css">
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="print" href="print.css">


<link rel="Start" href="Home">


</head>

<body lang="en" dir="ltr">

<table bgcolor = lightblue cellspacing = 0 style = "border: 0px;" width = 100%>
  <tr>
    <td style = "
		border: 0px;
		color: darkblue; 
		font-size: 150%;
		text-align: left;">
      <a class = mltona href="Home">MLton 20051202</a>
    <td style = "
		border: 0px;
		font-size: 150%;
		text-align: center;
		width: 50%;">
      History
    <td style = "
		border: 0px;
		text-align: right;">
      <table cellspacing = 0 style = "border: 0px">
        <tr style = "vertical-align: middle;">
      </table>
  <tr style = "background-color: white;">
    <td colspan = 3
	style = "
		border: 0px;
		font-size:70%;
		text-align: right;">
      <a href = "Home">Home</a>
      &nbsp;<a href = "Index">Index</a>
      &nbsp;
</table>
<div id="content" lang="en" dir="ltr">
In April 1997, Stephen Weeks wrote a defunctorizer for Standard ML and integrated it with SML/NJ.  The defunctorizer used SML/NJ's visible compiler and operated on the <tt>Ast</tt> intermediate representation produced by the SML/NJ front end.  Experiments showed that defunctorization gave a speedup of up to six times over separate compilation and up to two times over batch compilation without functor expansion. <p>
In August 1997, we began development of an independent compiler for SML.  At the time the compiler was called <tt>smlc</tt>.  By October, we had a working monomorphiser.  By November, we added a polyvariant higher-order control-flow analysis.  At that point, MLton was about 10,000 lines of code. 
</p>
<p>
Over the next year and half, <tt>smlc</tt> morphed into a full-fledged compiler for SML.  It was renamed MLton, and first released in March 1999. 
</p>
<p>
From the start, MLton has been driven by whole-program optimization and an emphasis on performance.  Also from the start, MLton has had a fast C FFI and <tt>IntInf</tt> based on the GNU multiprecision library. At its first release, MLton was 48,006 lines. 
</p>
<p>
Between the March 1999 and January 2002, MLton grew to 102,541 lines, as we added a native code generator, mllex, mlyacc, a profiler, many optimizations, and many libraries including threads and signal handling.   
</p>
<p>
During 2002, MLton grew to 112,204 lines and we had releases in April and September.  We added support for cross compilation and used this to enable MLton to run on Cygwin/Windows and FreeBSD.  We also made improvements to the garbage collector, so that it now works with large arrays and up to 4G of memory and so that it automatically uses copying, mark-compact, or generational collection depending on heap usage and RAM size.  We also continued improvements to the optimizer and libraries. 
</p>
<p>
During 2003, MLton grew to 122,299 lines and we had releases in March and July.  We extended the profiler to support source-level profiling of time and allocation and to display call graphs.  We completed the Basis Library implementation, and added new MLton-specific libraries for weak pointers and finalization.  We extended the FFI to allow callbacks from C to SML.  We added support for the Sparc/Solaris platform, and made many improvements to the C code generator. 
</p>
</div>



<p>
<hr>
Last edited on 2005-12-02 04:23:16 by <span title="209-6-203-188.c3-0.smr-ubr1.sbo-smr.ma.cable.rcn.com"><a href="MatthewFluet">MatthewFluet</a></span>.
</body></html>
