<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta name="robots" content="index,nofollow">



<title>Lazy - MLton Standard ML Compiler (SML Compiler)</title>
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="all" href="common.css">
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="screen" href="screen.css">
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="print" href="print.css">


<link rel="Start" href="Home">


</head>

<body lang="en" dir="ltr">

<table bgcolor = lightblue cellspacing = 0 style = "border: 0px;" width = 100%>
  <tr>
    <td style = "
		border: 0px;
		color: darkblue; 
		font-size: 150%;
		text-align: left;">
      <a class = mltona href="Home">MLton 20051202</a>
    <td style = "
		border: 0px;
		font-size: 150%;
		text-align: center;
		width: 50%;">
      Lazy
    <td style = "
		border: 0px;
		text-align: right;">
      <table cellspacing = 0 style = "border: 0px">
        <tr style = "vertical-align: middle;">
      </table>
  <tr style = "background-color: white;">
    <td colspan = 3
	style = "
		border: 0px;
		font-size:70%;
		text-align: right;">
      <a href = "Home">Home</a>
      &nbsp;<a href = "Index">Index</a>
      &nbsp;
</table>
<div id="content" lang="en" dir="ltr">
In a lazy (or non-strict) language, the arguments to a function are not evaluated before calling the function.  Instead, the arguments are suspended and only evaluated by the function if needed. <p>
<a href="StandardML">Standard ML</a> is an eager (or strict) language, not a lazy language.  However, it is easy to delay evaluation of an expression in SML by creating a <em>thunk</em>, which is a nullary function.  In SML, a thunk is written <tt>fn&nbsp;()&nbsp;=&gt;&nbsp;e</tt>.  Another essential feature of laziness is <em>memoization</em>, meaning that once a suspended argument is evaluated, subsequent references look up the value.  We can express this in SML with a function that maps a thunk to a memoized thunk. 
</p>

<pre class=code>
<B><FONT COLOR="#0000FF">signature</FONT></B> LAZY =
   <B><FONT COLOR="#0000FF">sig</FONT></B>
      <B><FONT COLOR="#A020F0">val</FONT></B> lazy: (unit -&gt; 'a) -&gt; unit -&gt; 'a
   <B><FONT COLOR="#0000FF">end</FONT></B>
</PRE>
<p>
 
</p>
<p>
This is easy to implement in SML. 
</p>

<pre class=code>
<B><FONT COLOR="#0000FF">structure</FONT></B> Lazy: LAZY =
   <B><FONT COLOR="#0000FF">struct</FONT></B>
      <B><FONT COLOR="#A020F0">fun</FONT></B> lazy (th: unit -&gt; 'a): unit -&gt; 'a =
         <B><FONT COLOR="#A020F0">let</FONT></B>
            <B><FONT COLOR="#A020F0">val</FONT></B> r: 'a option ref = ref NONE
         <B><FONT COLOR="#A020F0">in</FONT></B>
            <B><FONT COLOR="#A020F0">fn</FONT></B> () =&gt;
            <B><FONT COLOR="#A020F0">case</FONT></B> !r <B><FONT COLOR="#A020F0">of</FONT></B>
               NONE =&gt;
                  <B><FONT COLOR="#A020F0">let</FONT></B>
                     <B><FONT COLOR="#A020F0">val</FONT></B> a = th ()
                     <B><FONT COLOR="#A020F0">val</FONT></B> () = r := SOME a
                  <B><FONT COLOR="#A020F0">in</FONT></B>
                     a
                  <B><FONT COLOR="#A020F0">end</FONT></B>
             | SOME a =&gt; a
         <B><FONT COLOR="#A020F0">end</FONT></B>
   <B><FONT COLOR="#0000FF">end</FONT></B>
</PRE>
<p>
 
</p>
</div>



<p>
<hr>
Last edited on 2005-01-26 20:33:55 by <span title="cfs36.cs.cornell.edu"><a href="MatthewFluet">MatthewFluet</a></span>.
</body></html>
