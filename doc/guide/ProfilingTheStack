<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta name="robots" content="index,nofollow">



<title>ProfilingTheStack - MLton Standard ML Compiler (SML Compiler)</title>
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="all" href="common.css">
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="screen" href="screen.css">
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="print" href="print.css">


<link rel="Start" href="Home">


</head>

<body lang="en" dir="ltr">

<table bgcolor = lightblue cellspacing = 0 style = "border: 0px;" width = 100%>
  <tr>
    <td style = "
		border: 0px;
		color: darkblue; 
		font-size: 150%;
		text-align: left;">
      <a class = mltona href="Home">MLton 20051202</a>
    <td style = "
		border: 0px;
		font-size: 150%;
		text-align: center;
		width: 50%;">
      ProfilingTheStack
    <td style = "
		border: 0px;
		text-align: right;">
      <table cellspacing = 0 style = "border: 0px">
        <tr style = "vertical-align: middle;">
      </table>
  <tr style = "background-color: white;">
    <td colspan = 3
	style = "
		border: 0px;
		font-size:70%;
		text-align: right;">
      <a href = "Home">Home</a>
      &nbsp;<a href = "Index">Index</a>
      &nbsp;
</table>
<div id="content" lang="en" dir="ltr">
For all forms of <a href="Profiling">Profiling</a>, you can gather counts for all functions on the stack, not just the currently executing function.  To do so, compile your program with <tt>-profile-stack&nbsp;true</tt>.  For example, suppose that <tt>list-rev.sml</tt> contains the following. <p>
<pre class=code><B><FONT COLOR="#A020F0">fun</FONT></B> append (l1, l2) =
   <B><FONT COLOR="#A020F0">case</FONT></B> l1 <B><FONT COLOR="#A020F0">of</FONT></B>
      [] =&gt; l2
    | x :: l1 =&gt; x :: append (l1, l2)
         
<B><FONT COLOR="#A020F0">fun</FONT></B> rev l =
   <B><FONT COLOR="#A020F0">case</FONT></B> l <B><FONT COLOR="#A020F0">of</FONT></B>
      [] =&gt; []
    | x :: l =&gt; append (rev l, [x])

<B><FONT COLOR="#A020F0">val</FONT></B> l = List.tabulate (<B><FONT COLOR="#5F9EA0">1000</FONT></B>, <B><FONT COLOR="#A020F0">fn</FONT></B> i =&gt; i)
<B><FONT COLOR="#A020F0">val</FONT></B> _ = <B><FONT COLOR="#5F9EA0">1</FONT></B> + hd (rev l)
</PRE>
 
</p>
<p>
Compile with stack profiling and then run the program. 
<pre>% mlton -profile alloc -profile-stack true list-rev.sml
% ./list-rev
</pre>
</p>
<p>
Display the profiling data. 
</p>

<pre>% mlprof -show-line true list-rev mlmon.out
6,030,136 bytes allocated (108,336 bytes by GC)
       function          cur  stack  GC 
----------------------- ----- ----- ----
append  list-rev.sml: 1 97.6% 97.6% 1.4%
&lt;gc&gt;                     1.8%  0.0% 1.8%
&lt;main&gt;                   0.4% 98.2% 1.8%
rev  list-rev.sml: 6     0.2% 97.6% 1.8%
</pre><p>
In the above table, we see that <tt>rev</tt>, defined on line 6 of <tt>list-rev.sml</tt>, is only responsible for 0.2% of the allocation, but is on the stack while 97.6% of the allocation is done by the user program and while 1.8% of the allocation is done by the garbage collector. 
</p>
<p>
The run-time performance impact of <tt>-profile-stack&nbsp;true</tt> can be noticeable since there is some extra bookkeeping at every nontail call and return. 
</p>
</div>



<p>
<hr>
Last edited on 2005-12-02 00:47:48 by <span title="ppp-71-139-183-221.dsl.snfc21.pacbell.net"><a href="StephenWeeks">StephenWeeks</a></span>.
</body></html>
