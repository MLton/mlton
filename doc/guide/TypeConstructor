<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta name="robots" content="index,nofollow">



<title>TypeConstructor - MLton Standard ML Compiler (SML Compiler)</title>
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="all" href="common.css">
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="screen" href="screen.css">
<link rel="stylesheet" type="text/css" charset="iso-8859-1" media="print" href="print.css">


<link rel="Start" href="Home">


</head>

<body lang="en" dir="ltr">

<table bgcolor = lightblue cellspacing = 0 style = "border: 0px;" width = 100%>
  <tr>
    <td style = "
		border: 0px;
		color: darkblue; 
		font-size: 150%;
		text-align: left;">
      <a class = mltona href="Home">MLton 20051202</a>
    <td style = "
		border: 0px;
		font-size: 150%;
		text-align: center;
		width: 50%;">
      TypeConstructor
    <td style = "
		border: 0px;
		text-align: right;">
      <table cellspacing = 0 style = "border: 0px">
        <tr style = "vertical-align: middle;">
      </table>
  <tr style = "background-color: white;">
    <td colspan = 3
	style = "
		border: 0px;
		font-size:70%;
		text-align: right;">
      <a href = "Home">Home</a>
      &nbsp;<a href = "Index">Index</a>
      &nbsp;
</table>
<div id="content" lang="en" dir="ltr">
In <a href="StandardML">Standard ML</a>, a type constructor is a function from types to types.  Type constructors can be <em>nullary</em>, meaning that they take no arguments, as in <tt>char</tt>, <tt>int</tt>, and <tt>real</tt>. Type constructors can be <em>unary</em>, meaning that they take one argument, as in <tt>array</tt>, <tt>list</tt>, and <tt>vector</tt>.  A program can define a new type constructor in two ways: a <tt>type</tt> definition or a <tt>datatype</tt> declaration.  User-defined type constructors can can take any number of arguments. 
<pre class=code>
<B><FONT COLOR="#A020F0">datatype</FONT></B><FONT COLOR="#228B22"><B> t </FONT></B>=<FONT COLOR="#228B22"><B> <FONT COLOR="#B8860B">T</FONT> <B><FONT COLOR="#A020F0">of</FONT></B> int * real            <I><FONT COLOR="#B22222">(* 0 arguments *)</FONT></I>
</FONT></B><B><FONT COLOR="#A020F0">type</FONT></B><FONT COLOR="#228B22"><B> 'a t </FONT></B>=<FONT COLOR="#228B22"><B> 'a * int                    <I><FONT COLOR="#B22222">(* 1 argument *)</FONT></I>
</FONT></B><B><FONT COLOR="#A020F0">datatype</FONT></B><FONT COLOR="#228B22"><B> ('a, 'b) t </FONT></B>=<FONT COLOR="#228B22"><B> <FONT COLOR="#B8860B">A</FONT> </FONT></B>|<FONT COLOR="#228B22"><B> <FONT COLOR="#B8860B">B</FONT> <B><FONT COLOR="#A020F0">of</FONT></B> 'a * 'b  <I><FONT COLOR="#B22222">(* 2 arguments *)</FONT></I>
</FONT></B><B><FONT COLOR="#A020F0">type</FONT></B><FONT COLOR="#228B22"><B> ('a, 'b, 'c) t </FONT></B>=<FONT COLOR="#228B22"><B> 'a * ('b  -&gt; 'c)  <I><FONT COLOR="#B22222">(* 3 arguments *)</FONT></I>
</FONT></B></PRE>
<p>
 
</p>
<p>
Here are the syntax rules for type constructor application. 
</p>

    <ul>

    <li>
<p>
 Type constructor application is written in postfix.  So, one writes  <tt>int&nbsp;list</tt>, not <tt>list&nbsp;int</tt>.   
</p>
</li>
    <li class="gap">
<p>
 Unary type constructors drop the parens, so one writes   <tt>int&nbsp;list</tt>, not <tt>(int)&nbsp;list</tt>.   
</p>
</li>
    <li class="gap">
<p>
 Nullary type constructors drop the argument entirely, so one writes  <tt>int</tt>, not <tt>()&nbsp;int</tt>.  
</p>
</li>
    <li class="gap">
<p>
 N-ary type constructors use tuple notation; for example,   <tt>(int,&nbsp;real)&nbsp;t</tt>.  
</p>
</li>
    <li class="gap">
<p>
 Type constructor application associates to the left.  So,  <tt>int&nbsp;ref&nbsp;list</tt> is the same as <tt>(int&nbsp;ref)&nbsp;list</tt>. 
</p>
</li>
</ul>

</div>



<p>
<hr>
Last edited on 2005-12-02 04:26:23 by <span title="ppp-71-139-183-221.dsl.snfc21.pacbell.net"><a href="StephenWeeks">StephenWeeks</a></span>.
</body></html>
